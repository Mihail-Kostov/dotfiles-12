#+STARTUP: overview
#+STARTUP: indent

* lisp lifts
*** spacemacs/alternate-buffer
SPC TAB
back and forth between current and last buffer
#+BEGIN_SRC emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))
#+END_SRC

*** spacemacs/kill-this-buffer
SPC b d
#+BEGIN_SRC emacs-lisp
(defun spacemacs/kill-this-buffer (&optional arg)
  "Kill the current buffer.
If the universal prefix argument is used then kill also the window."
  (interactive "P")
  (if (window-minibuffer-p)
      (abort-recursive-edit)
    (if (equal '(4) arg)
        (kill-buffer-and-window)
      (kill-buffer))))
#+END_SRC

*** emacs-prelude
#+BEGIN_SRC emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

*** clipboard
#+BEGIN_SRC emacs-lisp
(defun copy-to-clipboard ()
  "Copies selection to x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "pbcopy")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
  )

(defun paste-from-clipboard ()
  "Pastes from x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "pbpaste"))
    )
  )
#+END_SRC

* my lisp functions
** bind tester
#+BEGIN_SRC emacs-lisp
(defun nin-echo ()
  "just a simple test message for binds"
  (interactive)
  (message "a bind funcionou! aeee!"))
#+END_SRC

* evil corruption
** evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
    (evil-mode))
#+END_SRC

** evil-commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :diminish evil-commentary-mode
  :config
    (evil-commentary-mode))
#+END_SRC

** evil-matchit
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  :ensure t
  :config
    (global-evil-matchit-mode 1))
#+END_SRC

** evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
    (global-evil-surround-mode 1))
#+END_SRC

** evil-exchange
#+BEGIN_SRC emacs-lisp
(use-package evil-exchange
  :ensure t
  :config
    (evil-exchange-install))
#+END_SRC

** evil-args
#+begin_src emacs-lisp
(use-package evil-args
  :ensure t
  :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
)
#+end_src

** evil-visualstar
#+begin_src emacs-lisp
(use-package evil-visualstar 
  :ensure t
  :config
    (global-evil-visualstar-mode))
#+end_src

** evil-indent-plus
#+begin_src emacs-lisp
(use-package evil-indent-plus
  :ensure t
  :config
    (evil-indent-plus-default-bindings))
#+end_src

* utils
** restart-emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t)
#+END_SRC

** which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
    :diminish which-key-mode
	:config
	(which-key-mode))
  #+END_SRC

* tweaks
** interface options
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; highlight current line
  ;;(setq hl-line-sticky-flag nil)
  ;; (hl-line-mode 1)
  (global-hl-line-mode 1)
#+END_SRC

** gui
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  ;; emacs without X does not have scrollbars
  (scroll-bar-mode -1)

  ;; osx does not lose screen real state with menu bar mode on
  (when (eq system-type 'darwin)
    (progn
      ;; start maximized
      ;; (toggle-frame-maximized)
      (set-frame-parameter nil 'fullscreen 'fullboth)
      (menu-bar-mode 1))))
#+END_SRC

** font configuration
*** Monoisome
- get it at [[https://github.com/larsenwork/monoid][larsenwork/monoid]]
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Monoisome-14"))
  #+END_SRC

** themes
*** spacemacs
  #+BEGIN_SRC emacs-lisp
    (use-package spacemacs-theme 
      :ensure t)
    (load-theme 'spacemacs-dark t)
  #+END_SRC

*** gruvbox
  #+BEGIN_SRC emacs-lisp
    ;; (use-package gruvbox-theme
    ;;    :ensure t
    ;;    :config
    ;;    (load-theme 'gruvbox t))
  #+END_SRC

*** leuven
#+BEGIN_SRC emacs-lisp
;(load-theme 'leuven t)
#+END_SRC

** spaceline
- to determine separators. more options [[https://github.com/milkypostman/powerline/blob/master/powerline-separators.el#L9-L11][here]].
#+BEGIN_SRC emacs-lisp
  (use-package spaceline :ensure t
    :config
      (require 'spaceline-config)
      (spaceline-spacemacs-theme)

      ;; Separators for Powerline.
      ;; Included separators: 
      ;;   (alternate), arrow, arrow-fade, bar, (box), brace, butt,
      ;;   chamfer, contour, curve, rounded, roundstub, (slant), 
      ;;   (wave), (zigzag), and nil.
      (when (eq system-type 'darwin)
        (progn
          (setq ns-use-srgb-colorspace nil)
          (setq powerline-height 25)
          (setq powerline-default-separator 'utf-8)
          (setq powerline-default-separator 'slant)

          ;; this is for eyebrowse. nice looking unicode numbers for tagging different layouts
          ;; lifted from spaceline documentation
          (setq spaceline-workspace-numbers-unicode t)
          (setq spaceline-window-numbers-unicode t)

          ;; colouring for different evil-states
          (setq spaceline-highlight-face-func #'spaceline-highlight-face-evil-state)

          ;; this setting is waiting upon confirmation of usefullness on reddit
          ;; thread: https://www.reddit.com/r/emacs/comments/56hlch/challenge_explain_to_me_what_powerlineraw_really/
          ;;(setq powerline-raw " ")

          (spaceline-compile)))

      (when (eq system-type 'gnu/linux)
        (progn
          (setq powerline-height 25)
          (setq powerline-default-separator nil)
          (spaceline-compile))))
#+END_SRC

** backups
- lifted from [[https://github.com/magnars/.emacs.d/blob/master/init.el][magnar's emacs.d]]
#+BEGIN_SRC emacs-lisp
;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)
#+END_SRC

** garbage collection tuning
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

* fixes
** move custom data out of init.el
- more info [[http://irreal.org/blog/?p=3765][here]]
- and [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][here (M-x all-things-emacs)]]
  #+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-customizations.el")
(load custom-file 'noerror)
  #+END_SRC

** yasnippet hijacks TAB key in term mode
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook 'my-term-mode-hook)
(defun my-term-mode-hook ()
  (yas-minor-mode -1))
#+END_SRC

** make zsh with bindkey -v and ansi-term be friendly to each other [[https://github.com/syl20bnr/spacemacs/issues/7140][syl20bnr/spacemacs#7140]]
*** TheBB's solution
- shamelessly lifted from github.com/TheBB's config
- not working though.
#+BEGIN_SRC emacs-lisp
  ;(evil-set-initial-state 'term-mode 'emacs)
  ;(evil-set-initial-state 'calculator-mode 'emacs)
  ;(evil-define-key 'emacs term-raw-map (kbd "C-c") 'term-send-raw)
  ;(push 'term-mode evil-escape-excluded-major-modes)
#+END_SRC

*** from SO question: [[http://emacs.stackexchange.com/questions/21605/term-raw-map-and-local-unset-key-need-to-pass-m-left-right-up-down-to-shell][question]]
#+BEGIN_SRC emacs-lisp
(defun my-term-hook ()
  (define-key term-raw-map (kbd "<escape>")
    (lambda () (interactive) (term-send-raw-string "\e[")))
)
(add-hook 'term-mode-hook 'my-term-hook)
#+END_SRC

** fix $PATH on macosx with exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
      (use-package exec-path-from-shell
        :ensure t
        :config
          (exec-path-from-shell-initialize)))
#+END_SRC

* packages
** org Mode
*** general configs
- somewhat lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
    '((sequence "☛ TODO" "○ IN-PROGRESS" "⚑ WAITING" "|" "✓ DONE" "✗ CANCELED")))

(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
(setq org-log-done (quote time))
(setq org-log-redeadline (quote time))
(setq org-log-reschedule (quote time))
#+END_SRC

*** org capture
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("a" "My TODO task format." entry
         (file "~/code/sources/life/inbox.org")
         "* ☛ TODO %?
SCHEDULED: %t")))
(defun air-org-task-capture ()
  "Capture a task with my default template."
  (interactive)
  (org-capture nil "a"))
#+END_SRC

*** org agenda
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO" "WIP" "WAITING" "|" "DONE" "CANCELED")))


  (setq org-agenda-files '("~/code/sources/life/"))

  (defun air-pop-to-org-agenda (split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda-list)
    (when (not split)
      (delete-other-windows)))

  (setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC

*** Org bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (progn
        (when (display-graphic-p)
          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
        (setq org-ellipsis "…")))

;Other interesting characters are ▼, ↴, ⬎, ⤷,…, and ⋱.
;(setq org-ellipsis "⤵")
  #+END_SRC

*** Reveal.js
  #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure t)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize 
  :ensure t)
  #+END_SRC
  
** magit
- for more info about magit-display-buffer-function, see [[http://stackoverflow.com/q/39933868/4921402][here]].
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t
    :config
      ;;(setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
      (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

      (use-package evil-magit :ensure t)
      (setq magit-repository-directories '("~/code/sources"))
  )
#+END_SRC

** ivy/counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)

      ;; here we turn on ivy fuzzy matching mode (and use `flx' package, if present)
      ;;
      ;; * lifted from bling's and abo-abo's  comments from these urls: 
      ;;   - https://github.com/abo-abo/swiper/issues/154 
      ;;   - https://www.reddit.com/r/emacs/comments/3xzas3/help_with_ivycounsel_fuzzy_matching_and_sorting/cy9432y
      ;; 
      ;; * also se this post on oremacs.com (abo-abo's blog, the creator of ivy, counsel, hydra and avy):
      ;;   - http://oremacs.com/2016/01/06/ivy-flx/
      ;; (setq ivy--regex-function 'ivy--regex-fuzzy)
      ;; (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))

      ;; use counsel
      (use-package counsel :ensure t)

      ;; use flx for fuzzy matching
      (use-package flx :ensure t)
  )

#+END_SRC

** projectile
- the projectile-switch-project-action hack was lifted from [[projectile-switch-project-action][here]].
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :config
    (add-hook 'after-init-hook 'projectile-mode)
    (use-package counsel-projectile :ensure t)
    
    ;; not used because `SPC-gs' is sealing the deal for the moment
    ;;(setq projectile-switch-project-action 'projectile-vc)
)
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-mode-map (kbd "C-SPC") 'company-complete)
)
#+END_SRC

** yasnippet
  #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
    (progn
      (yas-global-mode 1)
    )
)
  #+END_SRC

** flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC


** ag: the silver searcher
#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC

** markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
    (progn
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

      (defun my-web-mode-hook ()
        "Hooks for Web mode."
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset    2)
        (setq web-mode-code-indent-offset   2))
      (add-hook 'web-mode-hook 'my-web-mode-hook)))
#+END_SRC

** js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC

** ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t
    :config
        (ranger-override-dired-mode t)
        (setq ranger-cleanup-on-disable t)
        (setq ranger-show-dotfiles t)
        (setq ranger-hide-cursor nil))
#+END_SRC

** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse :ensure t
  :config
    (setq eyebrowse-wrap-around t)
    (eyebrowse-mode t)
)
#+END_SRC

* binds
** bind-map
#+BEGIN_SRC emacs-lisp
(use-package bind-map :ensure t
    :config 
      (bind-map main-map
        :evil-keys ("SPC")
        :evil-states (normal visual motion))
      (bind-map org-map
        :evil-keys (",")
        :evil-states (normal visual)
        :major-modes (org-mode))
      (bind-map q-map 
        :evil-keys ("q")
        :evil-states (normal visual))
)
#+END_SRC

** SPC
*** core/directs
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "<SPC>" 'counsel-M-x
  )
#+END_SRC

*** c: counsel/ivy
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "ca" 'counsel-ag
)
(which-key-declare-prefixes "SPC c" "counsel/ivy")
#+END_SRC

*** d: docs, descriptions, help
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "db" 'counsel-descbinds
    "dc" 'describe-char
    "df" 'counsel-describe-function
    "dk" 'describe-key
    "dv" 'counsel-describe-variable)
  (which-key-declare-prefixes "SPC d" "docs/descriptions/help")
#+END_SRC

*** e: eyebrowse
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
    "ec" 'eyebrowse-create-window-config
    "en" 'eyebrowse-next-window-config
    "er" 'eyebrowse-rename-window-config
    "es" 'eyebrowse-switch-to-window-config
)
(which-key-declare-prefixes "SPC e" "eyebrowse")
#+END_SRC

*** f: file
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "fj" 'dired-jump
    "fp" 'prelude-copy-file-name-to-clipboard
  )
  (which-key-declare-prefixes "SPC f" "file operations")
#+END_SRC

*** g: git
- *lift*: the below magit SPC gs bind hack was lifted from [[http://emacs.stackexchange.com/a/27623/12585][this]] SO answer.
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "gf" 'magit-log-buffer-file

    "gs" (lambda () (interactive) 
           (magit-status (magit-read-repository 
             (>= (prefix-numeric-value current-prefix-arg) 16))))
       
    ;; testing out http://emacs.stackexchange.com/a/27625/12585 hack.
    ;; "gs" (lambda () (interactive)
    ;;         (universal-argument)
    ;;         (call-interactively 'magit-status))

  )
  (which-key-declare-prefixes "SPC g" "[ma]git operations")
#+END_SRC

*** i: ivy
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "is" 'ivy-push-view
    "ik" 'ivy-pop-view
  )
  (which-key-declare-prefixes "SPC i" "ivy")
#+END_SRC

*** l: lisp evaluation
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "lb" 'org-babel-execute-src-block
    "ll" 'eval-last-sexp)
  (which-key-declare-prefixes "SPC l" "evaluation")
#+END_SRC

*** o: org-mode
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "oc" 'air-org-task-capture
    "oa" 'air-pop-to-org-agenda
  )
  (which-key-declare-prefixes "SPC o" "org-mode")
#+END_SRC

*** p: projectile
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "pa" 'projectile-ag
  "ps" 'counsel-projectile-switch-project
)
(which-key-declare-prefixes "SPC p" "projectile")
#+END_SRC

*** s: spelling
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "sw" 'ispell-word
  "se" (lambda () (interactive) (ispell-change-dictionary "english") (flyspell-mode))
  "sp" (lambda () (interactive) (ispell-change-dictionary "pt_BR")   (flyspell-mode))
  "sk" (lambda () (interactive) (flyspell-mode -1))
)
(which-key-declare-prefixes "SPC s" "spelling")
#+END_SRC

*** t: terminal
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "tt" 'ansi-term)
(which-key-declare-prefixes "SPC t" "terminal")
#+END_SRC

** core
*** abusing the g prefix
#+BEGIN_SRC emacs-lisp
;; faster than `gg' and `G`.
(define-key evil-motion-state-map "go" 'evil-goto-first-line)
(define-key evil-motion-state-map "gl" 'evil-goto-line)

;; magit status
(define-key evil-motion-state-map "gs" 'magit-status)

;; counsel-projectile
(define-key evil-motion-state-map "g." 'counsel-projectile)

;; swiper
(define-key evil-motion-state-map "g/" 'swiper)

;; counsel-recentf
(define-key evil-motion-state-map "gh" 'counsel-recentf)

;;custom pagedowns and pageups
(define-key evil-motion-state-map "g9" (kbd "Hz-M"))
(define-key evil-motion-state-map "g0" (kbd "LztM"))

(define-key evil-motion-state-map "g1" 'eyebrowse-switch-to-window-config-1)
(define-key evil-motion-state-map "g2" 'eyebrowse-switch-to-window-config-2)
(define-key evil-motion-state-map "g3" 'eyebrowse-switch-to-window-config-3)
(define-key evil-motion-state-map "g4" 'eyebrowse-switch-to-window-config-4)

;; turn off search highlight (muscle memory)
(define-key evil-motion-state-map "g-" 'evil-ex-nohighlight)
#+END_SRC

*** comfort binds
#+BEGIN_SRC emacs-lisp
;; toggle fold: faster and more comfortable than `za'
;; `cl' is a complete replacement for `s'
(define-key evil-normal-state-map "s" 'evil-toggle-fold)

;; save: faster than `:w'
(define-key evil-normal-state-map (kbd "RET") 'evil-write)

;; file/buffer selection
(define-key evil-normal-state-map (kbd "TAB") 'ivy-switch-buffer)
(define-key evil-normal-state-map (kbd "DEL") 'counsel-find-file)
#+END_SRC

*** comfort swaps/improvements
#+BEGIN_SRC emacs-lisp
  ;; invertion of `'` and `"`
  (define-key evil-normal-state-map "'" 'evil-use-register)
  (define-key evil-normal-state-map "\"" 'evil-goto-mark-line)

  ;; invert `{' and `)'. used way more then { and }
  (define-key evil-motion-state-map "(" 'evil-backward-paragraph)
  (define-key evil-motion-state-map ")" 'evil-forward-paragraph)

  ;; `Q' is my new `q'. open up q prefix for abuse.
  (define-key evil-normal-state-map "Q" 'evil-record-macro)
#+END_SRC

*** fixes
#+BEGIN_SRC emacs-lisp
;; As I've sequestered < and > when in org mode, we need a workaround.
(define-key evil-motion-state-map "g>" 'evil-shift-right)
(define-key evil-motion-state-map "g<" 'evil-shift-left)

;; `z.' fix
(define-key evil-normal-state-map "z." 'evil-scroll-line-to-center)

;; `z-' fix
(define-key evil-normal-state-map "z-" 'evil-scroll-line-to-bottom)
#+END_SRC

** q
#+BEGIN_SRC emacs-lisp
  ;; quits: file saves, buffer deletes, window exits, you name it...
  (bind-map-set-keys q-map
    "c" 'evil-save-modified-and-close
    "e" 'evil-quit
    "r" 'restart-emacs
    "d" 'kill-this-buffer
      
    "j" 'evil-window-down
    "k" 'evil-window-up
    "h" 'evil-window-left
    "l" 'evil-window-right
    "v" 'evil-window-vsplit
    "x" 'evil-window-split
  )
#+END_SRC

** insert state
#+begin_src emacs-lisp
#+end_src

** org
*** local fixes
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "TAB") 'ivy-switch-buffer)
  (when (display-graphic-p)
    (evil-define-key 'normal org-mode-map (kbd "<tab>") 'ivy-switch-buffer))

  (evil-define-key 'normal org-mode-map (kbd "RET") 'evil-write)

  ;; movement
  (evil-define-key 'normal org-mode-map "zu" 'outline-up-heading)
  (evil-define-key 'normal org-mode-map "zh" 'outline-previous-visible-heading)
  (evil-define-key 'normal org-mode-map "zj" 'org-forward-heading-same-level)
  (evil-define-key 'normal org-mode-map "zk" 'org-backward-heading-same-level)
  (evil-define-key 'normal org-mode-map "zl" 'outline-next-visible-heading)

  (evil-define-key 'normal org-mode-map "<" 'org-do-promote)
  (evil-define-key 'normal org-mode-map ">" 'org-do-demote)
  #+END_SRC

*** local leader
***** z: zoom / visualization
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  "zi" 'org-narrow-to-subtree
  "zo" 'widen)
(which-key-declare-prefixes ", z" "zoom")
#+END_SRC

***** t: subtree commands
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  ;; subtree commands
  "sh" 'org-promote-subtree
  "sl" 'org-demote-subtree
  "sk" 'org-move-subtree-up
  "sj" 'org-move-subtree-down
  "sy" 'org-copy-subtree
  "sd" 'org-cut-subtree
  "sp" 'org-paste-subtree
  "ss" 'org-show-subtree
  "sc" 'org-clone-subtree-with-time-shift)
(which-key-declare-prefixes ", s" "org subtree operations")
#+END_SRC

***** i: insertions
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  "ih" 'org-insert-heading
  "ia" 'org-insert-heading-after-current
  "ir" 'org-insert-heading-respect-content
  "is" 'org-insert-subheading
  "il" 'org-insert-link)
(which-key-declare-prefixes ", i" "insertions/additions")
#+END_SRC

***** *: others
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  ;; code blocks
  "*" 'org-ctrl-c-star

  ;; lists
  "-" 'org-ctrl-c-minus

  ;; lists
  "=" 'org-export-dispatch
  
  ;; cycle
  "TAB" 'org-cycle)
#+END_SRC

** dired
*** fix: unhijack my precious SPC leader key.
- lifted from this [[http://stackoverflow.com/a/10672548/4921402][SO question]]
#+BEGIN_SRC emacs-lisp
(define-key dired-mode-map (kbd "SPC") nil)
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(define-key magit-status-mode-map (kbd "SPC") nil)
(define-key magit-status-mode-map "go" 'evil-goto-first-line)
#+END_SRC

** awesome available binds
*** g prefix
- gr
- gt

- gT

*** SPC leader
- TAB
- / 
- .
- ;
- ,
- -

- ?
    
* syntax-highlight
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
    ;; start in almost all main program modes
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)
#+END_SRC

** highlight-parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :diminish highlight-parentheses-mode
    :config
      (progn
        (add-hook 'prog-mode-hook #'highlight-parentheses-mode)
        (add-hook 'org-mode-hook #'highlight-parentheses-mode)
        (setq hl-paren-delay 0.2)
        (setq hl-paren-colors '("Springgreen3"
                                "IndianRed1"
                                "IndianRed3"
                                "IndianRed4"))
        (set-face-attribute 'hl-paren-face nil :weight 'ultra-bold)))
#+END_SRC

** vimrc mode
#+BEGIN_SRC emacs-lisp
(use-package vimrc-mode
  :ensure t)
#+END_SRC

** dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :config 
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

* diminishes
#+BEGIN_SRC emacs-lisp
(diminish 'undo-tree-mode)
(diminish 'auto-revert-mode)
(diminish 'org-indent-mode)
#+END_SRC

* tips
** hack to determine operating system
- originally (if darwin) found [[http://stackoverflow.com/a/1817318/4921402][here.]]
- system-type is a variable defined in `C source code'.
- Special values:
  - `gnu'         compiled for a GNU Hurd system.
  - `gnu/linux'   compiled for a GNU/Linux system.
  - `darwin'      compiled for Darwin (GNU-Darwin, Mac OS X, ...).
  - `ms-dos'      compiled as an MS-DOS application.
  - `windows-nt'  compiled as a native W32 application.
  - `cygwin'      compiled using the Cygwin library.
- Anything else indicates some sort of Unix system.
* disabled
** Avy
  1. See https://github.com/abo-abo/avy for more info
  2. navigate by searching for a letter on the screen and jumping to it
  #+BEGIN_SRC emacs-lisp
    ;; (use-package avy
    ;;   :ensure t)
  #+END_SRC

