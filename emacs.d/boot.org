#+STARTUP: overview
#+STARTUP: indent

* evil mode
** evil bootstrap
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
    (evil-mode))
#+END_SRC

** evil commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :config
    (evil-commentary-mode))
#+END_SRC

* spacemacs steals
** alternate last buffer
SPC TAB
back and forth between current and last buffer

#+BEGIN_SRC emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))
#+END_SRC

** kill this buffer
SPC b d
#+BEGIN_SRC emacs-lisp
(defun spacemacs/kill-this-buffer (&optional arg)
  "Kill the current buffer.
If the universal prefix argument is used then kill also the window."
  (interactive "P")
  (if (window-minibuffer-p)
      (abort-recursive-edit)
    (if (equal '(4) arg)
        (kill-buffer-and-window)
      (kill-buffer))))
#+END_SRC

* bind-map
#+BEGIN_SRC emacs-lisp
(use-package bind-map
  :ensure t
  :config
    (bind-map main-map
      :evil-keys ("SPC")
      :evil-states (normal motion visual))
    (bind-map org-map
      :evil-keys ("SPC m" ",")
      :major-modes (org-mode ))
)
#+END_SRC

* binds
** normal binds
*** single binds
  #+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "TAB") 'spacemacs/alternate-buffer)
(define-key evil-normal-state-map (kbd "RET") 'evil-write)
(define-key evil-normal-state-map "s" 'evil-toggle-fold)
(define-key evil-normal-state-map "Q" 'evil-quit)
(define-key evil-normal-state-map "Z" 'evil-save-modified-and-close)
(define-key evil-motion-state-map "(" 'evil-backward-paragraph)
(define-key evil-motion-state-map ")" 'evil-forward-paragraph)
(define-key evil-normal-state-map "-" 'evil-ex-nohighlight)
;; (define-key evil-normal-state-map "S" 'evil-avy-goto-word-1)
  #+END_SRC

*** g prefix binds
#+BEGIN_SRC emacs-lisp
(define-key evil-motion-state-map "go" 'evil-goto-first-line)
(define-key evil-motion-state-map "gl" 'evil-goto-line)
(define-key evil-normal-state-map "gs" 'magit-status)
#+END_SRC

** leader group binds
*** buffer binds
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
    "bb" 'ivy-switch-buffer
    "bd" 'spacemacs/kill-this-buffer)
(which-key-declare-prefixes "SPC b" "buffers")
#+END_SRC
*** docs, descriptions
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "dc" 'describe-char
    "df" 'counsel-describe-function
    "dv" 'counsel-describe-variable
  )
  (which-key-declare-prefixes "SPC d" "docs/descriptions")
#+END_SRC

*** windows
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "wj" 'evil-window-down
  "wk" 'evil-window-up
  "wh" 'evil-window-left
  "wl" 'evil-window-right
  "wv" 'evil-window-vsplit
  "wx" 'evil-window-split
)
(which-key-declare-prefixes "SPC w" "windows")
#+END_SRC

*** files
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "ff" 'counsel-find-file
  "fr" 'counsel-recentf
  "fb" 'restart-emacs
)
(which-key-declare-prefixes "SPC f" "files")
#+END_SRC

** leader direct binds
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "<SPC>" 'counsel-M-x
  "?" 'counsel-descbinds
  ; "TAB" 'achar uma função bacana para colocar aqui 
)
#+END_SRC
** org-mode binds
**** normal org mode binds
  #+BEGIN_SRC emacs-lisp
  
  (evil-define-key 'normal org-mode-map (kbd "TAB") 'spacemacs/alternate-buffer)
  (when (display-graphic-p)
    (evil-define-key 'normal org-mode-map (kbd "<tab>") 'spacemacs/alternate-buffer)
  )

  (evil-define-key 'normal org-mode-map "gh" 'outline-up-heading)
  (evil-define-key 'normal org-mode-map "gk" 'org-backward-heading-same-level)
  (evil-define-key 'normal org-mode-map "gj" 'org-forward-heading-same-level)
  (evil-define-key 'normal org-mode-map "gn" 'outline-next-visible-heading)

  (evil-define-key 'normal org-mode-map "<" 'org-do-promote)
  (evil-define-key 'normal org-mode-map ">" 'org-do-demote)
  (evil-define-key 'visual org-mode-map "<" 'org-do-promote)
  (evil-define-key 'visual org-mode-map ">" 'org-do-demote)
  #+END_SRC

**** leader org binds 
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  "*" 'org-ctrl-c-star
  "e" 'org-narrow-to-subtree
  "s" 'widen
)
#+END_SRC

**** local org mode bind fixes
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "RET") 'evil-write)
#+END_SRC

** esc key fixes
esc quits pretty much anything (like pending prompts in the minibuffer)
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

* fixes
** move custom data out of init.el
- more info [[http://irreal.org/blog/?p=3765][here]]
- and [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][here (M-x all-things-emacs)]]
  #+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-customizations.el")
(load custom-file 'noerror)
  #+END_SRC
** Yasnippet hijacks TAB key in term mode
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook 'my-term-mode-hook)
(defun my-term-mode-hook ()
  (yas-minor-mode -1))
#+END_SRC

** make zsh with bindkey -v and ansi-term be friendly to each other [[https://github.com/syl20bnr/spacemacs/issues/7140][syl20bnr/spacemacs#7140]]
*** TheBB's solution
- shamelessly lifted from github.com/TheBB's config
- not working though.
#+BEGIN_SRC emacs-lisp
  ;(evil-set-initial-state 'term-mode 'emacs)
  ;(evil-set-initial-state 'calculator-mode 'emacs)
  ;(evil-define-key 'emacs term-raw-map (kbd "C-c") 'term-send-raw)
  ;(push 'term-mode evil-escape-excluded-major-modes)
#+END_SRC

*** from SO question: [[http://emacs.stackexchange.com/questions/21605/term-raw-map-and-local-unset-key-need-to-pass-m-left-right-up-down-to-shell][question]]
#+BEGIN_SRC emacs-lisp
(defun my-term-hook ()
  (define-key term-raw-map (kbd "<escape>")
    (lambda () (interactive) (term-send-raw-string "\e[")))
)
(add-hook 'term-mode-hook 'my-term-hook)
#+END_SRC

* appearance
** Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(tool-bar-mode -1)
(menu-bar-mode -1)

;; emacs without X does not have scrollbars
(when (display-graphic-p)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)
)

(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Font configuration
*** Monoisome
- get it at [[https://github.com/larsenwork/monoid][larsenwork/monoid]]
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Monoisome-14"))
  #+END_SRC

** Themes
*** spacemacs
  #+BEGIN_SRC emacs-lisp
    (use-package spacemacs-theme 
      :ensure t)
    ;(load-theme 'spacemacs-dark t)
  #+END_SRC

*** gruvbox
  #+BEGIN_SRC emacs-lisp
    ;; (use-package gruvbox-theme
    ;;    :ensure t
    ;;    :config
    ;;    (load-theme 'gruvbox t))
  #+END_SRC

*** leuven
#+BEGIN_SRC emacs-lisp
(load-theme 'leuven t)
#+END_SRC

** Modeline
*** spaceline
**** bootstrap
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t)
(require 'spaceline-config)
(spaceline-spacemacs-theme)
#+END_SRC

**** customization
***** determine operating system hack (if darwin) found [[http://stackoverflow.com/a/1817318/4921402][here.]]
- system-type is a variable defined in `C source code'.
- Special values:
  - `gnu'         compiled for a GNU Hurd system.
  - `gnu/linux'   compiled for a GNU/Linux system.
  - `darwin'      compiled for Darwin (GNU-Darwin, Mac OS X, ...).
  - `ms-dos'      compiled as an MS-DOS application.
  - `windows-nt'  compiled as a native W32 application.
  - `cygwin'      compiled using the Cygwin library.
- Anything else indicates some sort of Unix system.
***** determine separators. more options [[https://github.com/milkypostman/powerline/blob/master/powerline-separators.el#L9-L11][here]].
#+BEGIN_SRC emacs-lisp
;; determine operating system.
(if (eq system-type 'darwin)
  (setq powerline-default-separator 'alternate)
  (setq powerline-default-separator nil)
)
(spaceline-compile)
#+END_SRC

*** smartmodeline
#+BEGIN_SRC emacs-lisp
  ;; (use-package smart-mode-line
  ;;   :ensure t
  ;;   :config
  ;;     (sml/setup)
  ;; )
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
)
(use-package evil-magit
  :ensure t
)
#+END_SRC

* utils
** Try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t
)
#+END_SRC

** restart-emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t
)
#+END_SRC

** Which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* org mode
** Org bullets 
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
    (when (display-graphic-p)
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
    (setq org-ellipsis "…")
    ;Other interesting characters are ▼, ↴, ⬎, ⤷,…, and ⋱.
    ;(setq org-ellipsis "⤵")
  )
  #+END_SRC

** Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure t
    )

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
      :ensure t
    )
  #+END_SRC

  #+RESULTS:
  : t
  
* avy
  See https://github.com/abo-abo/avy for more info
  navigate by searching for a letter on the screen and jumping to it
  #+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
  )
  #+END_SRC
  
* ivy
ivy is a helm lightweight replacement
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :config

      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")

      (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit))

    (use-package counsel
      :ensure t
    )
#+END_SRC

* disabled
** Flycheck
  #+BEGIN_SRC emacs-lisp
    ;; (use-package flycheck
    ;;   :ensure t
    ;;   :init
    ;;   (global-flycheck-mode t))
  #+END_SRC

** Autocomplete
  #+BEGIN_SRC emacs-lisp
    ;; (use-package auto-complete
    ;; :ensure t
    ;; :init
    ;; (progn
    ;;   (ac-config-default)
    ;;   (global-auto-complete-mode t)
    ;;   ))
  #+END_SRC

** Yasnippet
  #+BEGIN_SRC emacs-lisp
    ;; (use-package yasnippet
    ;;   :ensure t
    ;;   :init
    ;;     (yas-global-mode 1))
  #+END_SRC

