* evil mode
evilfying emacs binds
** evil bootstrap
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode))
#+END_SRC
** evil leader
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config
    (evil-leader/set-leader "<SPC>")
    (global-evil-leader-mode))
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(tool-bar-mode -1)
(menu-bar-mode -1)

;; emacs without X does not have scrollbars
(when (display-graphic-p)
  (scroll-bar-mode -1))

(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* font configuration
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Monoisome-14"))
  #+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC
* Org mode
  Org bullets makes things look pretty
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
  #+END_SRC
* Avy 
  See https://github.com/abo-abo/avy for more info
  navigate by searching for a letter on the screen and jumping to it
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC
* Ivy

ivy is a helm lightweight replacement

#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :config

      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")

      (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
    )

    (use-package counsel
      :ensure t
      :config
#+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+END_SRC
* Themes
** spacemacs theme setup
  #+BEGIN_SRC emacs-lisp
    (use-package spacemacs-theme 
      :ensure t)
    (load-theme 'spacemacs-dark t)

    (use-package spaceline 
      :ensure t)
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)

    (setq powerline-default-separator 'alternate)
    ;(setq powerline-default-separator nil)
    ;(setq spaceline-minor-modes-separator nil)
    (spaceline-compile)

    ;; more options here: https://github.com/milkypostman/powerline/blob/master/powerline-separators.el#L9-L11
    ;; example:
    ;; (setq powerline-default-separator 'alternate)
  #+END_SRC
** an alternative grubox setup
  #+BEGIN_SRC emacs-lisp
  ; ALTERNATIVE GRUVBOX setup!
  ;(use-package gruvbox-theme
     ;:ensure t)
  ;(load-theme 'gruvbox t)

  #+END_SRC
** modeline: artur malabarba's smart-modeline
  #+BEGIN_SRC emacs-lisp
  ;(use-package smart-mode-line
  ;   :ensure t)
  ;(setq sml/theme 'dark)
  ;(setq sml/theme 'light)
  ;(setq sml/theme 'respectful)
  ;(setq sml/no-confirm-load-theme t)
  ;(sml/setup)
  #+END_SRC
* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
    :ensure t)
  #+END_SRC

  #+RESULTS:
  : t
  
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))

  #+END_SRC

* Magit 
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
)

(use-package evil-magit
  :ensure t
  :config
)
#+END_SRC
* Binds

  here goes my evil binding

** normal binds

  #+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "s" 'evil-toggle-fold)
  (define-key evil-normal-state-map (kbd "RET") 'evil-write)
  (define-key evil-normal-state-map "Q" 'evil-quit)
  (define-key evil-normal-state-map "Z" 'evil-save-modified-and-close)
  (define-key evil-normal-state-map ":" 'evil-repeat-find-char)
  (define-key evil-normal-state-map ";" 'evil-ex)
  (define-key evil-motion-state-map "go" 'evil-goto-first-line)
  (define-key evil-motion-state-map "gl" 'evil-goto-line)
  (define-key evil-motion-state-map "(" 'evil-backward-paragraph)
  (define-key evil-motion-state-map ")" 'evil-forward-paragraph)
  (define-key evil-normal-state-map "-" 'evil-ex-nohighlight)
  (define-key evil-normal-state-map "S" 'evil-avy-goto-word-1)
  
  (defun enter-scratch-buffer nil
    "switch to the scratch buffer"
    (interactive)
    (switch-to-buffer "*scratch*")
    (lisp-interaction-mode))
  (define-key evil-normal-state-map "gs" 'enter-scratch-buffer)

  #+END_SRC
** window movements
#+BEGIN_SRC emacs-lisp
    (evil-leader/set-key
      "j" 'evil-window-down
      "k" 'evil-window-up
      "h" 'evil-window-left
      "l" 'evil-window-right
      "v" 'evil-window-vsplit
      "x" 'evil-window-split
    )
#+END_SRC
** esc key special treatment

esc quits pretty much anything (like pending prompts in the minibuffer)

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

** org-mode binds
*** normal org mode binds
  #+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map "gh" 'outline-up-heading)
  (evil-define-key 'normal org-mode-map "gk" 'org-backward-heading-same-level)
  (evil-define-key 'normal org-mode-map "gj" 'org-forward-heading-same-level)
  (evil-define-key 'normal org-mode-map "gn" 'outline-next-visible-heading)

  (evil-define-key 'normal org-mode-map "<" 'org-do-promote)
  (evil-define-key 'normal org-mode-map ">" 'org-do-demote)
  (evil-define-key 'visual org-mode-map "<" 'org-do-promote)
  (evil-define-key 'visual org-mode-map ">" 'org-do-demote)
  #+END_SRC
*** leader org binds 
#+BEGIN_SRC emacs-lisp
    (evil-leader/set-key "*" 'org-ctrl-c-star)
#+END_SRC

*** local org mode bind fixes
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "RET") 'evil-write)
#+END_SRC

** leader binds
#+BEGIN_SRC emacs-lisp
    (evil-leader/set-key
      "f" 'counsel-find-file
      "b" 'ivy-switch-buffer
      "r" 'counsel-recentf
      "g" 'magit-status
      "<SPC>" 'counsel-M-x)
    )
#+END_SRC
* local org options
#+STARTUP: overview
#+STARTUP: indent
