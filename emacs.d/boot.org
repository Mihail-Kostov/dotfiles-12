#+STARTUP: overview
#+STARTUP: indent

* evil mode
** evil bootstrap
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
    (evil-mode)
)
#+END_SRC

** evil commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :config
    (evil-commentary-mode))
#+END_SRC

* spacemacs steals
** alternate-buffer
SPC TAB
back and forth between current and last buffer

#+BEGIN_SRC emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))
#+END_SRC

** kill-this-buffer
SPC b d
#+BEGIN_SRC emacs-lisp
(defun spacemacs/kill-this-buffer (&optional arg)
  "Kill the current buffer.
If the universal prefix argument is used then kill also the window."
  (interactive "P")
  (if (window-minibuffer-p)
      (abort-recursive-edit)
    (if (equal '(4) arg)
        (kill-buffer-and-window)
      (kill-buffer))))
#+END_SRC

* bind-map
#+BEGIN_SRC emacs-lisp
(use-package bind-map
    :ensure t)
(bind-map main-map
    :evil-keys ("SPC")
    :evil-states (normal motion visual))
(bind-map dash-map
    :evil-keys ("-")
    :evil-states (normal motion visual))
(bind-map backslash-map
    :evil-keys ("\\")
    :evil-states (normal motion visual))
(bind-map org-map
    :evil-keys ("," "q")
    :evil-states (normal visual)
    :major-modes (org-mode))
#+END_SRC

* binds
** core
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "Q" 'evil-record-macro)

(define-key evil-normal-state-map (kbd "RET") 'evil-write)
(define-key evil-normal-state-map "s" 'evil-toggle-fold)
(define-key evil-motion-state-map "(" 'evil-backward-paragraph)
(define-key evil-motion-state-map ")" 'evil-forward-paragraph)

(define-key evil-normal-state-map (kbd "TAB") 'spacemacs/alternate-buffer)

(define-key evil-motion-state-map "go" 'evil-goto-first-line)
(define-key evil-motion-state-map "gl" 'evil-goto-line)

;; I've sequestered < and > when in org mode. need a backup.
(define-key evil-motion-state-map "g>" 'evil-shift-right)
(define-key evil-motion-state-map "g<" 'evil-shift-left)
#+END_SRC

** leaders
*** SPC
**** direct
***** core
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "<SPC>" 'counsel-M-x
  "TAB" 'evil-next-buffer
  ;; "-"   'available
  ;; "?"   'available
)
#+END_SRC

***** window 
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "j" 'evil-window-down
  "k" 'evil-window-up
  "h" 'evil-window-left
  "l" 'evil-window-right
  "v" 'evil-window-vsplit
  "x" 'evil-window-split
)
#+END_SRC

**** prefixes
***** b: buffer binds
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
    "bb" 'ivy-switch-buffer
    "bd" 'spacemacs/kill-this-buffer)
(which-key-declare-prefixes "SPC b" "buffers")
#+END_SRC

***** d: docs, descriptions, help
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "db" 'counsel-descbinds
    "dc" 'describe-char
    "df" 'counsel-describe-function
    "dk" 'describe-key
    "dv" 'counsel-describe-variable
  )
  (which-key-declare-prefixes "SPC d" "docs/descriptions")
#+END_SRC

***** e: evaluation
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys main-map
    "el" 'eval-last-sexp)
  (which-key-declare-prefixes "SPC e" "evaluation")
#+END_SRC

***** f: files
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "ff" 'counsel-find-file
  "fr" 'counsel-recentf
)
(which-key-declare-prefixes "SPC f" "files")
#+END_SRC

***** g: git
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "gs" 'magit-status
)
(which-key-declare-prefixes "SPC g" "git")
#+END_SRC

***** q: quit/restart
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "qq" 'evil-quit
  "qs" 'evil-save-modified-and-close
  "qr" 'restart-emacs
)
(which-key-declare-prefixes "SPC q" "quit/restart")
#+END_SRC

***** t: terminal
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys main-map
  "tt" 'ansi-term
)
(which-key-declare-prefixes "SPC t" "terminal")
#+END_SRC

*** Dash
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys dash-map
  "-" 'evil-ex-nohighlight
)
#+END_SRC

*** Backslash
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys backslash-map
  "-" 'evil-ex-nohighlight
)
#+END_SRC

** org-mode
**** local fixes
#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal org-mode-map (kbd "TAB") 'spacemacs/alternate-buffer)
(when (display-graphic-p)
  (evil-define-key 'normal org-mode-map (kbd "<tab>") 'spacemacs/alternate-buffer)
)

(evil-define-key 'normal org-mode-map (kbd "RET") 'evil-write)

(evil-define-key 'normal org-mode-map "<" 'org-do-promote)
(evil-define-key 'normal org-mode-map ">" 'org-do-demote)
  #+END_SRC

**** local leader
***** movement
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  ;; movement
  "u" 'outline-previous-visible-heading
  "h" 'outline-up-heading
  "k" 'org-backward-heading-same-level
  "j" 'org-forward-heading-same-level
  "l" 'outline-next-visible-heading
)
#+END_SRC

***** zoom / visualization
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  "zi" 'org-narrow-to-subtree
  "zo" 'widen
)
(which-key-declare-prefixes ", z" "org zoom")
(which-key-declare-prefixes "q z" "org zoom")
#+END_SRC

***** subtree commands
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  ;; subtree commands
  "th" 'org-promote-subtree
  "tl" 'org-demote-subtree
  "tk" 'org-move-subtree-up
  "tj" 'org-move-subtree-down
  "ty" 'org-copy-subtree
  "td" 'org-cut-subtree
  "tp" 'org-paste-subtree
  "ts" 'org-show-subtree
  "tc" 'org-clone-subtree-with-time-shift
)
(which-key-declare-prefixes ", t" "org tree ops")
(which-key-declare-prefixes "q t" "org tree ops")
#+END_SRC

***** insertions
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map

  "ih" 'org-insert-heading
  "ia" 'org-insert-heading-after-current
  "ir" 'org-insert-heading-respect-content

  "is" 'org-insert-subheading

  "il" 'org-insert-link
)
(which-key-declare-prefixes ", i" "insertions")
(which-key-declare-prefixes "q i" "insertions")
#+END_SRC

***** others
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  ;; code blocks
  "*" 'org-ctrl-c-star

  ;; lists
  "-" 'org-ctrl-c-minus

  ;; lists
  "=" 'org-export-dispatch
)
#+END_SRC

* fixes
** move custom data out of init.el
- more info [[http://irreal.org/blog/?p=3765][here]]
- and [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][here (M-x all-things-emacs)]]
  #+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-customizations.el")
(load custom-file 'noerror)
  #+END_SRC
** Yasnippet hijacks TAB key in term mode
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook 'my-term-mode-hook)
(defun my-term-mode-hook ()
  (yas-minor-mode -1))
#+END_SRC

** make zsh with bindkey -v and ansi-term be friendly to each other [[https://github.com/syl20bnr/spacemacs/issues/7140][syl20bnr/spacemacs#7140]]
*** TheBB's solution
- shamelessly lifted from github.com/TheBB's config
- not working though.
#+BEGIN_SRC emacs-lisp
  ;(evil-set-initial-state 'term-mode 'emacs)
  ;(evil-set-initial-state 'calculator-mode 'emacs)
  ;(evil-define-key 'emacs term-raw-map (kbd "C-c") 'term-send-raw)
  ;(push 'term-mode evil-escape-excluded-major-modes)
#+END_SRC

*** from SO question: [[http://emacs.stackexchange.com/questions/21605/term-raw-map-and-local-unset-key-need-to-pass-m-left-right-up-down-to-shell][question]]
#+BEGIN_SRC emacs-lisp
(defun my-term-hook ()
  (define-key term-raw-map (kbd "<escape>")
    (lambda () (interactive) (term-send-raw-string "\e[")))
)
(add-hook 'term-mode-hook 'my-term-hook)
#+END_SRC

* appearance
** Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(tool-bar-mode -1)
(menu-bar-mode -1)

(when (display-graphic-p)
  ;; emacs without X does not have scrollbars
  (scroll-bar-mode -1)

  ;; osx does not lose screen real state with menu bar mode on
  (when (eq system-type 'darwin)
    (menu-bar-mode 1)
  )
)


(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Font configuration
*** Monoisome
- get it at [[https://github.com/larsenwork/monoid][larsenwork/monoid]]
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Monoisome-14"))
  #+END_SRC

** Themes
*** spacemacs
  #+BEGIN_SRC emacs-lisp
    (use-package spacemacs-theme 
      :ensure t)
    (load-theme 'spacemacs-dark t)
  #+END_SRC

*** gruvbox
  #+BEGIN_SRC emacs-lisp
    ;; (use-package gruvbox-theme
    ;;    :ensure t
    ;;    :config
    ;;    (load-theme 'gruvbox t))
  #+END_SRC

*** leuven
#+BEGIN_SRC emacs-lisp
;(load-theme 'leuven t)
#+END_SRC

** Modeline
*** spaceline (activated on OSx)
**** bootstrap
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (use-package spaceline
    :ensure t)
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
)
#+END_SRC

**** customization
#+BEGIN_SRC emacs-lisp
;; determine operating system.
(when (eq system-type 'darwin)
  (progn
    (setq powerline-default-separator 'alternate)
    (spaceline-compile)
  )
)
#+END_SRC
- determine separators. more options [[https://github.com/milkypostman/powerline/blob/master/powerline-separators.el#L9-L11][here]].
***** determine operating system hack (if darwin) found [[http://stackoverflow.com/a/1817318/4921402][here.]]
- system-type is a variable defined in `C source code'.
- Special values:
  - `gnu'         compiled for a GNU Hurd system.
  - `gnu/linux'   compiled for a GNU/Linux system.
  - `darwin'      compiled for Darwin (GNU-Darwin, Mac OS X, ...).
  - `ms-dos'      compiled as an MS-DOS application.
  - `windows-nt'  compiled as a native W32 application.
  - `cygwin'      compiled using the Cygwin library.
- Anything else indicates some sort of Unix system.

*** smartmodeline (activated on GNU/Linux)
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'gnu/linux)
    (use-package smart-mode-line
      :ensure t
      :config
        (setq sml/theme 'respectful)
        (setq sml/no-confirm-load-theme t)
        (sml/setup)
    )
  )
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
)
(use-package evil-magit
  :ensure t
)
#+END_SRC

* utils
** Try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t
)
#+END_SRC

** restart-emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t
)
#+END_SRC

** Which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* org mode
** Org bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
    (when (display-graphic-p)
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
    (setq org-ellipsis "…")
    ;Other interesting characters are ▼, ↴, ⬎, ⤷,…, and ⋱.
    ;(setq org-ellipsis "⤵")
  )
  #+END_SRC

** Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure t
    )

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
      :ensure t
    )
  #+END_SRC

  #+RESULTS:
  : t
  
* avy
  See https://github.com/abo-abo/avy for more info
  navigate by searching for a letter on the screen and jumping to it
  #+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
  )
  #+END_SRC
  
* ivy
ivy is a helm lightweight replacement
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :config

      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")

      (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit))

    (use-package counsel
      :ensure t
    )
#+END_SRC

* syntax highlights
** markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
#+END_SRC

** rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)

#+END_SRC

* disabled
** Flycheck
  #+BEGIN_SRC emacs-lisp
    ;; (use-package flycheck
    ;;   :ensure t
    ;;   :init
    ;;   (global-flycheck-mode t))
  #+END_SRC

** Autocomplete
  #+BEGIN_SRC emacs-lisp
    ;; (use-package auto-complete
    ;; :ensure t
    ;; :init
    ;; (progn
    ;;   (ac-config-default)
    ;;   (global-auto-complete-mode t)
    ;;   ))
  #+END_SRC

** Yasnippet
  #+BEGIN_SRC emacs-lisp
    ;; (use-package yasnippet
    ;;   :ensure t
    ;;   :init
    ;;     (yas-global-mode 1))
  #+END_SRC

