# zsh options {{{

# history config options
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt append_history
setopt extended_history
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_verify
setopt share_history

# dir change options
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_silent
setopt auto_cd

setopt extended_glob # allows us to use ^ to negate globs
unsetopt nomatch # but when pattern matching fails, simply use the command as is. See robbyrussell/oh-my-zsh#449

# defining word endings
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# completions

autoload -Uz compinit && compinit
zstyle ':completion:*' menu select

# better dir completion (case insensitive)
setopt menu_complete
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# }}}
# terminal colors {{{

TC='\e['
Rst="${TC}0m"     # Reset all coloring and style
Black="${TC}30m";
Red="${TC}31m";
Green="${TC}32m";
Yellow="${TC}33m";
Blue="${TC}34m";
Purple="${TC}35m";
Cyan="${TC}36m";
White="${TC}37m";

# }}}
# path {{{

PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

GNUBIN_PATH=/usr/local/opt/coreutils/libexec/gnubin
PATH="$GNUBIN_PATH:$PATH"

MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

export PATH

# }}}
# exports {{{

# needed in some machines
if [ -z ${SHELL+x}  ]; then
  export SHELL=$(which zsh)
fi

# standard configs
export LANG=en_US.UTF-8
export TERM=xterm-256color
export EDITOR=nvim

# zplug config
export ZPLUG_CLONE_DEPTH=1

# ENHANCD customizations
export ENHANCD_COMMAND=d
export ENHANCD_FILTER=fzf-tmux

# FZF customizations
export FZF_DEFAULT_COMMAND='ag --hidden --path-to-agignore=~/.agignore -g ""'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="find . -path '*/.git' -prune -o -type d -print"

# }}}
# FZF Setup {{{
# -------------
if [[ ! "$PATH" == *.fzf/bin* ]]; then
  export PATH="$PATH:$HOME/.fzf/bin"
fi

# Man path
# --------
if [[ ! "$MANPATH" == */Users/ninrod/.fzf/man* && -d "$HOME/.fzf/man" ]]; then
  export MANPATH="$MANPATH:$HOME/.fzf/man"
fi

# Auto-completion
# ---------------
[[ $- == *i* ]] && source "$HOME/.fzf/shell/completion.zsh" 2> /dev/null

# Key bindings
# ------------
source "$HOME/.fzf/shell/key-bindings.zsh"

# }}}
# load user config {{{

SHELL_USER_CONFIG_FILE="$(realpath ~)/.options/shell-options.conf"
if [[ -e "$SHELL_USER_CONFIG_FILE" ]]; then
  . "$SHELL_USER_CONFIG_FILE"
fi

# }}}
# plugins {{{

# Zplug
source ~/.zplug/init.zsh

zplug "Tarrasch/zsh-bd"
zplug "b4b4r07/enhancd", use:init.sh
zplug "felixr/docker-zsh-completion"
zplug "supercrabtree/k"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-syntax-highlighting", nice:10

zplug "~/code/nin-vi-mode", from:local

if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi
zplug load

# colors for GNU ls (from coreutils)
eval `dircolors ~/.lscolors`

# }}}
# alias {{{

# precendence alias
alias ls='ls --color=auto --group-directories-first -X'
alias ag='ag --hidden --path-to-agignore=~/.agignore'

# general binds
alias b='cd ..'
alias c='clear'
alias di='dirs -v | head -n 10'
alias dic='dirs -c'
alias dot='la `find ~ -maxdepth 1 -type l`'
alias e='exit'
alias k='k -h'
alias l='ls -lh'
alias la='ls -lhA'
alias ll='ls -h'
alias lla='ls -hA'
alias m='nman'
alias r='exec zsh'
alias rd='open /usr/local/share/doc/rust/html/index.html'
alias s='du -sm * | sort -nr | head -n 20'
alias t='tmux'
alias tarc='tar -zcvf file.tar.gz'
alias tarx='tar -zxvf'
alias v='nvim'
alias vi='vim -u NONE -N'
alias vt='v ~/.tmux.conf(:A)'
alias vv='v ~/.vimrc(:A)'
alias vz='v ~/.zshrc(:A)'
alias w='echo -e "$Blue ${"$(pwd)"/$HOME/~} ${Red}at ${Cyan}$(whoami)${Red}@${Yellow}$(hostname -s)$Red using $Yellow${0}$Purple \$"'
alias zshcru='zsh -f'

# git alias
alias g='git status -sb'
alias ga='git add'
alias gal='git add -A'
alias gd='git diff'
alias gdh='git diff --cached'
alias gds='git diff --stat'
alias gf='git fetch'
alias gg='git branch -vv'
alias gi='builtin cd $(git rev-parse --show-toplevel)'
alias gl='git log --pretty=format:"%C(yellow)%h%Creset %C(blue)%d%Creset %C(cyan)%ad%Creset %C(magenta)%an%Creset %C(white)%s%Creset " --date=relative --graph'
alias gld='git log --pretty=format:"%C(yellow)%h%Creset %C(blue)%d%Creset %C(cyan)%ad%Creset %C(magenta)%an%Creset %s" --graph'
alias glf='git log --follow -p -- '
alias glnc='git log --pretty=format:"%h %ad %an %s" --date=short --graph'
alias glr='gl --reflog'
alias glsi='git ls-files -oiX .gitignore'
alias gm='git merge'
alias gp='git push'

# gls a cleaner glr {{{

gls () {
  gl $(git show-ref --heads -s | tr '\n' ' ') | head -n 20
}

# }}}
# gc: simple git commit front {{{
improved_gc () {
  if [[ ! -n ${1+x} ]]; then
    git commit -v
    return 0
  fi
  eval "noglob git commit -m \"$*\""
}
alias gc='noglob improved_gc'

# }}}
# md: faster dir creation {{{

md () {
  mkdir -p $1
  builtin cd $1
}

# }}}
# cd: enhancing enhancd {{{

cd () {
  if [[ -z $1 ]]; then
    # $1 is empty. go home
    builtin cd ~
  elif [[ $1 == '-' ]]; then
    # $1 == '-': switch to last visited dir
    builtin cd -
  elif [[ $1 == '..' ]]; then
    builtin cd ..
  elif [[ $1 =~ '\+[0-9]{1,2}' ]]; then
    # $1: `cd +8`, `cd +10`, cherry pick auto_pushd stack
    builtin cd $1
  elif command -v "$ENHANCD_COMMAND" > /dev/null; then
    # populate dir enhancd dir cache, clear and list
    d $1 && l
  else
    # enhancd did not load, use normal cd, clear and list
    builtin cd $1 && l
  fi
}

# }}}
# =: front for `bc` utility (credit goes to arzzen/calc.plugin.zsh) {{{

function = () {
  echo "$@" | bc -l
}

# }}}
# nman: neoman vim plugin {{{

function nman () {
  if [[ -z $* ]]; then
    echo "What manual page do you want?"
    return
  fi
  local tmp=$IFS
  IFS=$'\n' out=($(command man -w $* 2>&1))
  local code=$?
  IFS=$tmp
  if [[ ${#out[@]} > 1 ]]; then
    echo "Too many manpages"
    return
  elif [[ $code != 0 ]]; then
    echo "No manual entry for $*"
    return
  fi
  vim -c "Nman $*"
}
compdef nman="man"

# }}}
# git_log_month: custom git log: 1 month worth of commits $1 months ago with $2 command {{{

git_log_month () {
  if [[ -z $1 ]]; then
    gl
    return 0
  fi

  if [[ ! $1 =~ '^[0-9]{1,2}$' ]]; then
    print "must be a number"
    return 0
  fi

  local after=$(date "+%Y-%m-%d" --date="$1 month ago")
  print "after = $after"

  local git_command=gl
  if [[ -n "$2" ]]; then
    git_command=$2
  fi

  if [[ "$1" == "1" ]]; then
    eval "$git_command --after=$after"
    return 0
  fi

  local before=$(date "+%Y-%m-%d" --date="$(((${1}-1))) month ago")

  print "before = $before"

  eval "$git_command --after=$after --before=$before"
}

# }}}

# }}}
# prompt {{{

# light
# PROMPT='%F{cyan}%1~%f %F{red}#%f '

######## dark

# very simple with directory truncation
PROMPT='%F{blue}%12<...<%1~%<<%f %F{magenta}$%f '

# showing whoami@hostname
# PROMPT='%F{blue}%1~%f %F{cyan}%n%f%F{red}@%f%F{yellow}%m%f %F{magenta}#%f '

# showing whaami@hostname and with truncation
# PROMPT="%F{blue}%10<...<%1~%<<%f %F{cyan}%n%f%F{red}@%f%F{yellow}%m%f %F{magenta}#%f "

# }}}
# FZF ZLE extra bindkeys {{{

bindkey '^E' fzf-cd-widget

# }}}
# bootstrap commands {{{

# user git information set up
if [[ -n ${GIT_USER_NAME+x} ]]; then
  git config --global user.name $GIT_USER_NAME
  export GIT_USER_NAME
fi
if [[ -n ${GIT_USER_EMAIL+x} ]]; then
  git config --global user.email $GIT_USER_EMAIL
  export GIT_USER_EMAIL
fi

# }}}
