" vim options {{{

" nvim/vim differences
if has('nvim')
  " I sometimes accidentally place my thumb on the macbook trackpad
  set mouse=c
else
  " UTF encoding
  set encoding=utf-8
endif

" Switch syntax highlighting on, when the terminal has colors
syntax on

" Use vim, not vi api
set nocompatible

" No backup files
set nobackup

" No write backup
set nowritebackup

" No swap file
set noswapfile

" Command history
set history=100

" diff options. without this Gdiff was splitting horizontally on OSx.
set diffopt=filler,vertical

" Always show cursor
set ruler

" Show incomplete commands
set showcmd

" search configurations
" Incremental searching (search as you type)
set incsearch

" Highlight search matches
set hlsearch

" set smartcase
set ic

" A buffer is marked as ‘hidden’ if it has unsaved changes, and it is not currently loaded in a window.
" If you try and quit Vim while there are hidden buffers, you will raise an error:
" E162: No write since last change for buffer “a.txt”
set hidden

" Turn word wrap off
set nowrap

" Allow backspace to delete end of line, indent and start of line characters
set backspace=indent,eol,start

" Convert tabs to spaces
set expandtab

" Set tab size in spaces (this is for manual indenting)
set tabstop=2

" The number of spaces inserted for a tab (used for auto indenting)
set shiftwidth=2

" Turn on line numbers and relative line numbers
set nu
set rnu

" Highlight tailing whitespace
set list listchars=tab:\ \ ,trail:·

" Get rid of the delay when pressing O (for example)
" http://stackoverflow.com/questions/2158516/vim-delay-before-o-opens-a-new-line
set timeout timeoutlen=1000 ttimeoutlen=100

" Always show status bar
set laststatus=2

" Hide the toolbar
set guioptions-=T

" Autoload files that have changed outside of vim
set autoread

" http://stackoverflow.com/questions/8134647/copy-and-paste-in-vim-via-keyboard-between-different-mac-terminals
" Use system clipboard
set clipboard+=unnamed

" Don't show intro
set shortmess+=I

" Better splits (new windows appear below and to the right)
set splitbelow
set splitright

" Highlight the current line
set cursorline

" Visual autocomplete for command menu (e.g. :e ~/path/to/file)
set wildmenu

" highlight a matching [{()}] when cursor is placed on start/end character
set showmatch

" indicates a wrap line continuation
set showbreak=←←

" redraw only when we need to (i.e. don't redraw when executing a macro)
set lazyredraw

" TODO carefully verify the usefulness of this
set wildignore+=*/.hg/*,*/.svn/*.,*/.DS_Store,*/.idea/*,*/.tmp/*,*/target/*

" syntax/sh.vim adds `.` to iskeyword(verify with :verbose set iskeyword?). so `w` jumps past it. see :h g:sh_isk
let g:sh_noisk=1

" enable language-dependent indenting.
filetype plugin indent on

" }}}
" plugins {{{

call plug#begin('~/.vim/plugged')

Plug 'bronson/vim-visual-star-search'
Plug 'chaoren/vim-wordmotion'
Plug 'ervandew/supertab'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf'}
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'nelstrom/vim-markdown-folding'
Plug 'nhooyr/neoman.vim'
Plug 'ninrod/ninscratch-vim'
Plug 'ninrod/vis'
Plug 'othree/xml.vim'
Plug 'sheerun/vim-polyglot', {'for': ['rust', 'javascript', 'xml', 'html', 'markdown', 'tmux']}
Plug 'terryma/vim-multiple-cursors'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'wellle/targets.vim'
Plug 'whatyouhide/vim-lengthmatters'
Plug 'timakro/vim-searchant'

Plug 'justinmk/molokai'
Plug 'morhetz/gruvbox'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'

Plug 'edkolev/tmuxline.vim'

Plug 'kana/vim-textobj-user'
  \| Plug 'kana/vim-textobj-entire',
  \| Plug 'kana/vim-textobj-function', {'for': 'javascript'}
  \| Plug 'thinca/vim-textobj-function-javascript', {'for': 'javascript'}
  \| Plug 'whatyouhide/vim-textobj-xmlattr', {'for': ['html', 'xml']}

" resource hog
" Plug 'SirVer/ultisnips'
"   \| Plug 'ninrod/vim-snippets'

call plug#end()

" }}}
" plugin configuration {{{

" auto-pairs {{{

" auto-pairs plugin maps 'â' in insert mode limiting our ability to type 'â'. So we fix it.
let g:AutoPairsShortcutBackInsert=''

" }}}
" lightline.vim {{{

let g:lightline = {'colorscheme': 'solarized_dark'}

" }}}
" vim-commentary {{{

" disable double backslash
let g:commentary_map_backslash=0

" }}}
" vim-lengthmatters {{{
let g:lengthmatters_excluded = ['markdown']
" }}}
" vim-multiple-cursors {{{

let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" }}}
" vim-searchant {{{

let g:searchant_map_stop = 0
nmap - <Plug>SearchantStop

" }}}

" vim-colors-solarized {{{

set background=dark
let g:solarized_bold=1
let g:solarized_underline=0
let g:solarized_visibility="high"
let g:solarized_contrast="high"
let g:solarized_diffmode="high"
" let g:solarized_termcolors=16
" silent! colorscheme solarized

" }}}
" molokai {{{

" let g:rehash256 = 1
" let g:molokai_original = 1
" silent! colorscheme molokai

" }}}
" gruvbox {{{

" silent! colorscheme gruvbox

" }}}
" jellybeans {{{

silent! colorscheme jellybeans

" }}}

" tmuxline.vim {{{

let g:tmuxline_powerline_separators = 0

" }}}

" }}}
" binds {{{

" standard bind changes {{{

" I do not usually navigate sentences
" I've already rebound { for helpfile navigation
" ( is more convenient than {
nnoremap ( {
xnoremap ( {
nnoremap ) }
xnoremap ) }

nmap g<space> <Plug>(blankUp)
nmap g<cr> <Plug>(blankDown)

nnoremap <F11> :so $MYVIMRC<CR>

" faster folding (current fold toggle)
nnoremap s za

" the default `q` macro bind always screws me.
" so we changed it to a not ofensive one, like `;`.
" it helps that I've already lost `;` for `:`.
" let's pretended that S stands for `S`tore macro.
" also, `cc` is a complete substitute for `S`
nnoremap S q
nnoremap q ;
xnoremap q ;

" more convenient access to the command prompt (shift sucks)
" based on tip from Damian Conway https://youtu.be/aHm36-na4-4?t=598
nnoremap ; :
xnoremap ; :

" same idea as above: better access to register stuff. We use more `"` than `'` and shift sucks.
nnoremap ' "
nnoremap " '
xnoremap ' "
xnoremap " '

" trying out gl for `G` (shift sucks)
nnoremap gl G
vnoremap gl G
onoremap gl G

" space is my leader key, but '\' remains as leader.
nmap <Space> <Leader>
omap <Space> <Leader>
xmap <Space> <Leader>

" enter saves file
nnoremap <cr> :w<cr>

" faster exit
nnoremap Z ZZ
nnoremap Q ZQ

" navigate vim help files
nnoremap  } <C-]>
nnoremap {  <C-T>

" bind to facilitate bracket selection
omap ir i[
omap ar a[
xmap ir i[
xmap ar a[

" faster access to diff
nnoremap <f5> :windo diffthis<cr>

" }}}
" leader binds {{{

" custom pageups and pagedowns
nmap <leader>d LztM
nmap <leader>u HzbM

" equalizing windows
nmap <leader>= <C-W>=

" resizing windows
nmap <leader><right> <C-W>10>
nmap <leader><left>  <C-W>10<
nmap <leader><up>    <C-W>10+
nmap <leader><down>  <C-W>10-

" moving between windows
nmap <leader>h <C-W>h
nmap <leader>j <C-W>j
nmap <leader>k <C-W>k
nmap <leader>l <C-W>l

" moving windows
nmap <leader>H <C-W>H
nmap <leader>J <C-W>J
nmap <leader>K <C-W>K
nmap <leader>L <C-W>L

" open a vertical window
nmap <leader>v <C-W>v

" open a horizontal window
nmap <leader>x <C-W>s

" }}}
" plugin binds {{{

" easyalign {{{
xmap <cr> <Plug>(EasyAlign)
" }}}
" nin-scratch {{{
nnoremap gs :NinScratch<CR>
" }}}
" fzf.vim {{{
nnoremap <leader>f :Files<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>r :History<cr>
nnoremap <leader>g :GitFiles<cr>

" FZF Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" FZF Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
" }}}

" }}}

" }}}
" auto commands {{{

" foldmethod configurations
autocmd BufRead * setlocal foldmethod=marker
set foldlevelstart=0

" jump to last cursor
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" specify syntax highlighting for specific files
autocmd Bufread,BufNewFile *.md set filetype=markdown " Vim interprets .md as 'modula2' otherwise, see :set filetype?
autocmd Bufread,BufNewFile *.bowerrc set filetype=json

" http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
autocmd Filetype markdown setlocal wrap linebreak nolist textwidth=0 wrapmargin=0 conceallevel=0 fdm=expr
autocmd FileType sh,ruby,yaml,zsh,vim setlocal shiftwidth=2 tabstop=2 expandtab

autocmd FileType java setlocal shiftwidth=4 tabstop=4 expandtab

autocmd Filetype gitcommit setlocal spell textwidth=80


" disabling auto commenting on new line, e.g. 'o' and 'O'
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" enabling <cr> to work properly on the quickfix window
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>

" quick bind for a 'wrap' command
command! -nargs=* Wrap set wrap linebreak nolist

" machit.vim extends % operator to work on html tags.
runtime macros/matchit.vim

" without this hack, % operator breaks on markdown file match navigation. e.g: '[' and '['.
" I suspect that other filetypes also need this.
autocmd BufReadPre,FileReadPre *.md,*.jsp MatchDebug

" fix for <CR> in command-line-window
silent! autocmd CmdwinEnter * nunmap <cr>
silent! autocmd CmdwinLeave * nnoremap <cr> :w<cr>

" }}}
" highlights {{{

" fix contrast issue with solarized dark.
" https://github.com/airblade/vim-gitgutter/issues/164
highlight clear SignColumn

" highlight cursor line line number
highlight CursorLineNr cterm=bold ctermfg=124

" vim-multiple-cursors {{{

" Multiple cursors Default highlighting (see help :highlight and help :highlight-link)
highlight multiple_cursors_cursor term=reverse cterm=reverse ctermfg=125 ctermbg=254
highlight link multiple_cursors_visual Visual

" }}}
" vim-lengthmatters {{{

" for solarized dark: magenta, light background
call lengthmatters#highlight('ctermbg=0 ctermfg=5')

" for solarized light
" call lengthmatters#highlight('ctermbg=7 ctermfg=1')

" very long, a very very very very long line to test really for lengthmatters coloring capabilities

" }}}

" }}}
"  functions {{{

" credits go to junegunn who personally helped me with this function
function! s:ag_with_opts(arg, bang)
  let tokens  = split(a:arg)
  let ag_opts = join(filter(copy(tokens + ['--hidden']), 'v:val =~ "^-"'))
  let query   = join(filter(copy(tokens), 'v:val !~ "^-"'))
  call fzf#vim#ag(query, ag_opts, a:bang ? {} : {'down': '40%'})
endfunction
autocmd VimEnter * command! -nargs=* -bang Nag call s:ag_with_opts(<q-args>, <bang>0)

function! s:blankUp()
  execute "normal mzO\<esc>`z"
  silent! call repeat#set("\<Plug>(blankUp)", 1)
endfunction
nnoremap <Plug>(blankUp) :<C-u>call <SID>blankUp()<CR>

function! s:blankDown()
  execute "normal mzo\<esc>`z"
  silent! call repeat#set("\<Plug>(blankDown)", 1)
endfunction
nnoremap <Plug>(blankDown) :<C-u>call <SID>blankDown()<CR>

" }}}
