" vim options {{{

if has('nvim')
  set mouse=c
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  " set termguicolors
else
  set nocompatible
  set encoding=utf-8
endif

syntax on

" backups
set nobackup
set nowritebackup
set noswapfile

" better '/'
set incsearch
set hlsearch
set ignorecase

" line numbers
set number
set relativenumber

" convert tabs to spaces
set expandtab
set tabstop=2
set shiftwidth=2

set history=100

" diff options. without this Gdiff was splitting horizontally on OSx.
set diffopt=filler,vertical

" show partial commands from operator pending mode
set showcmd

" show line numbers on status line
set ruler

" A buffer is marked as ‘hidden’ if it has unsaved changes, and it is not currently loaded in a window.
" If you try and quit Vim while there are hidden buffers, you will raise an error:
" E162: No write since last change for buffer “a.txt”
set hidden

" fix backspace behaviour
set backspace=indent,eol,start

" show trailing spaces
set list listchars=tab:\ \ ,trail:·

" Get rid of the delay when pressing O (for example)
" http://stackoverflow.com/questions/2158516/vim-delay-before-o-opens-a-new-line
set timeout timeoutlen=1000 ttimeoutlen=100

" Always show status bar
set laststatus=2

" Hide the toolbar
set guioptions-=T

" Autoload files that have changed outside of vim
set autoread

" http://stackoverflow.com/questions/8134647/copy-and-paste-in-vim-via-keyboard-between-different-mac-terminals
" better gui clipboard integration
set clipboard+=unnamed

" Don't show intro
set shortmess+=I

" better splits
set splitbelow
set splitright

" Highlight the current line
set cursorline

" Visual autocomplete for command menu (e.g. :e ~/path/to/file)
set wildmenu

" highlight a matching [{()}] when cursor is placed on start/end character
set showmatch

" do not wrap long lines
set nowrap

" indicates a wrap line continuation
set showbreak=←←

" redraw only when we need to (i.e. don't redraw when executing a macro)
set lazyredraw

" TODO carefully verify the usefulness of this
set wildignore+=*/.hg/*,*/.svn/*.,*/.DS_Store,*/.idea/*,*/.tmp/*,*/target/*

" syntax/sh.vim adds `.` to iskeyword(verify with :verbose set iskeyword?). so `w` jumps past it. see :h g:sh_isk
let g:sh_noisk=1

let g:netrw_banner      = 0
let g:netrw_bufsettings = 'relativenumber, number'
let g:netrw_liststyle   = 1
" let g:netrw_keepdir   = 0

filetype plugin indent on

" better cursor shape for terminal (works with iTerm2)
" see: https://www.iterm2.com/documentation-escape-codes.html
if empty($TMUX)
  let &t_SI = "\<Esc>]1337;CursorShape=1\x7"
  let &t_EI = "\<Esc>]1337;CursorShape=0\x7"
  let &t_SR = "\<Esc>]1337;CursorShape=2\x7"
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]1337;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]1337;CursorShape=0\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]1337;CursorShape=2\x7\<Esc>\\"
endif

" }}}
" plugins {{{

call plug#begin('~/.vim/plugged')

" luochen1990/rainbow {{{

Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

" }}}

"core
Plug 'Yggdroot/indentLine'
Plug 'bronson/vim-visual-star-search'
Plug 'chaoren/vim-wordmotion'
Plug 'ervandew/supertab'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-easy-align'
Plug 'nelstrom/vim-markdown-folding'
Plug 'nhooyr/neoman.vim'
Plug 'ninrod/ninscratch-vim'
Plug 'ninrod/vis'
Plug 'othree/xml.vim', {'for': ['xml', 'html']}
Plug 'terryma/vim-multiple-cursors'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'wellle/targets.vim'

"theme
Plug 'itchyny/lightline.vim'
Plug 'morhetz/gruvbox'
Plug 'edkolev/tmuxline.vim'

" new text objs
Plug 'kana/vim-textobj-user'
  \| Plug 'kana/vim-textobj-entire',
  \| Plug 'kana/vim-textobj-function', {'for': 'javascript'}
  \| Plug 'kana/vim-textobj-indent'
  \| Plug 'thinca/vim-textobj-function-javascript', {'for': 'javascript'}
  \| Plug 'whatyouhide/vim-textobj-xmlattr', {'for': ['html', 'xml']}

" local
Plug '~/.fzf'

" plugin cemetery
" Plug 'timakro/vim-searchant'
" Plug 'whatyouhide/vim-lengthmatters'
" Plug 'justinmk/molokai'
" Plug 'altercation/vim-colors-solarized'
" Plug 'NLKNguyen/papercolor-theme'
" Plug 'nanotech/jellybeans.vim'
" Plug 'sheerun/vim-polyglot'
" Plug 'SirVer/ultisnips'
"   \| Plug 'ninrod/vim-snippets'

call plug#end()

" }}}
" theme configuration {{{

" less eye strain
set background=dark

" gruvbox {{{

" must be set before invoking colorscheme
" gruvbox inverted selection is too much information to me
" plus, the inverted select does not
" play nicely with vim-multiple-cursors
let g:gruvbox_invert_selection=0

silent! colorscheme gruvbox

" 166 = gruvbox neutral_orange
highlight ExtraWhitespace ctermfg=166 guifg=#d65d0e
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

let g:goyo_width = '80%'
let g:goyo_height = '80%'
let g:goyo_linenr = 1

" }}}
" jellybeans {{{

" silent! colorscheme jellybeans

" }}}
" vim-colors-solarized {{{

" let g:solarized_bold=1
" let g:solarized_underline=0
" let g:solarized_visibility="high"
" let g:solarized_contrast="high"
" let g:solarized_diffmode="high"
" let g:solarized_termcolors=16
" silent! colorscheme solarized

" }}}
" molokai {{{

" let g:rehash256 = 1
" let g:molokai_original = 1
" silent! colorscheme molokai

" }}}
" papercolor {{{

" silent! colorscheme PaperColor

" }}}

" tmuxline.vim {{{

let g:tmuxline_powerline_separators = 1

" }}}
" lightline.vim {{{

" let g:lightline = {
"       \'colorscheme': 'gruvbox'
"       \}

let g:lightline = {
      \'colorscheme': 'gruvbox',
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \}

" }}}

" }}}
" binds {{{

" standard bind changes {{{

" as vim-wordmotion sequestered our `w` binds, we must provide an alternative
" se https://github.com/chaoren/vim-wordmotion/issues/6
xnoremap io iw
xnoremap ao aw
onoremap io iw
onoremap ao aw

" these were inspired from the famous Damian Conway talk at OSCON 2013 https://youtu.be/aHm36-na4-4?t=598
" basically, shift sucks. So we improve our bindings accordingly

" : is more used than ;
nnoremap ; :
xnoremap ; :

" `:` is the new `,`
nnoremap : ,
xnoremap : ,

" `,` is the new `$`
nnoremap , $
xnoremap , $
onoremap , $

" `q` is almost never used and screws me a lot 
" plus I do need `;` sometimes
" just use `:s` instead of &. 
" that's if you ever had to use it in your whole life.
nnoremap q ;
xnoremap q ;
nnoremap & q

" `'` more used than `"`
nnoremap ' "
nnoremap " '
xnoremap ' "
xnoremap " '

" just use `k^` instead of `-`. 
" that's if you even ever used `-` in the first place which i did not
nnoremap - :noh<cr>

" `cl` is a complete substitute for `s` (also note that `cc` substitues `S`)
nnoremap s :silent! normal za<cr>

" I do not usually navigate sentences when programming
" ( is more convenient than {
" I've already rebound { for vim helpfile navigation
nnoremap ( {
xnoremap ( {
nnoremap ) }
xnoremap ) }

" trying out gl for `G` (shift sucks)
nnoremap gl G
vnoremap gl G
onoremap gl G

nmap g<space> <Plug>(blankUp)
nmap g<cr> <Plug>(blankDown)

" better bracket selection
omap ir i[
omap ar a[
xmap ir i[
xmap ar a[
omap ic i{
omap ac a{
xmap ic i{
xmap ac a{

" faster exit
nnoremap Q ZQ
nnoremap Z ZZ

" enter saves file
nnoremap <cr> :w<cr>

" navigate vim help files
nnoremap  } <C-]>
nnoremap {  <C-T>

" space is my leader key, but '\' remains as leader.
nmap <Space> <Leader>
omap <Space> <Leader>
xmap <Space> <Leader>

" }}}
" leader binds {{{

" custom pageups and pagedowns
nmap <leader>d LztM
nmap <leader>u HzbM

" resizing windows
nmap <leader><right> <C-W>10>
nmap <leader><left>  <C-W>10<
nmap <leader><up>    <C-W>10+
nmap <leader><down>  <C-W>10-

" moving between windows
nmap <leader>h <C-W>h
nmap <leader>j <C-W>j
nmap <leader>k <C-W>k
nmap <leader>l <C-W>l

" moving windows
nmap <leader>H <C-W>H
nmap <leader>J <C-W>J
nmap <leader>K <C-W>K
nmap <leader>L <C-W>L

" open a vertical window
nmap <leader>v <C-W>v

" open a horizontal window
nmap <leader>x <C-W>s

" }}}
" plugin binds {{{

" fzf.vim {{{

nnoremap <leader>f :Files<cr>
nnoremap <leader>r :History<cr>
nnoremap <leader>g :GitFiles<cr>

" FZF Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" FZF Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" }}}
" easyalign {{{

xmap <cr> <Plug>(EasyAlign)

" }}}
" nin-scratch {{{

nnoremap gs :NinScratch<CR>

" }}}

" }}}

" }}}
" auto commands {{{

" use cursor line only when in current window and out of insert mode
autocmd InsertLeave,WinEnter * set cursorline
autocmd InsertEnter,WinLeave * set nocursorline

" foldmethod configurations
autocmd BufRead * setlocal foldmethod=marker
set foldlevelstart=0

" jump to last cursor
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" specify syntax highlighting for specific files
autocmd Bufread,BufNewFile *.md set filetype=markdown " Vim interprets .md as 'modula2' otherwise, see :set filetype?
autocmd Bufread,BufNewFile *.bowerrc set filetype=json

" http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
autocmd Filetype markdown setlocal wrap linebreak nolist textwidth=0 wrapmargin=0 conceallevel=0 fdm=expr
autocmd FileType sh,ruby,yaml,zsh,vim setlocal shiftwidth=2 tabstop=2 expandtab

autocmd FileType java setlocal shiftwidth=4 tabstop=4 expandtab

autocmd Filetype gitcommit setlocal spell textwidth=80

" disabling auto commenting on new line, e.g. 'o' and 'O'
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" enabling <cr> to work properly on the quickfix window
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>

" quick bind for a 'wrap' command
command! -nargs=* Wrap set wrap linebreak nolist

" machit.vim extends % operator to work on html tags.
runtime macros/matchit.vim

" without this hack, % operator breaks on markdown file match navigation. e.g: '[' and '['.
" I suspect that other filetypes also need this.
autocmd BufReadPre,FileReadPre *.md,*.jsp MatchDebug

" fix for <CR> in command-line-window
silent! autocmd CmdwinEnter * nunmap <cr>
silent! autocmd CmdwinLeave * nnoremap <cr> :w<cr>

" }}}
" highlights {{{

" fix contrast issue with solarized dark.
" https://github.com/airblade/vim-gitgutter/issues/164
highlight clear SignColumn

" }}}
"  functions {{{

" credits go to junegunn who personally helped me with this function
function! s:ag_with_opts(arg, bang)
  let tokens  = split(a:arg)
  let ag_opts = join(filter(copy(tokens + ['--hidden']), 'v:val =~ "^-"'))
  let query   = join(filter(copy(tokens), 'v:val !~ "^-"'))
  call fzf#vim#ag(query, ag_opts, a:bang ? {} : {'down': '40%'})
endfunction
autocmd VimEnter * command! -nargs=* -bang Nag call s:ag_with_opts(<q-args>, <bang>0)

function! s:blankUp()
  execute "normal mzO\<esc>`z"
  silent! call repeat#set("\<Plug>(blankUp)", 1)
endfunction
nnoremap <Plug>(blankUp) :<C-u>call <SID>blankUp()<CR>

function! s:blankDown()
  execute "normal mzo\<esc>`z"
  silent! call repeat#set("\<Plug>(blankDown)", 1)
endfunction
nnoremap <Plug>(blankDown) :<C-u>call <SID>blankDown()<CR>

" }}}
" hacks {{{

" sunaku's hack. more info here:
" https://github.com/ninrod/tricks/blob/master/shell/tmux.md#sunakus-hack-for-fixing-256-colors-colorschemes-for-vim-inside-tmux
if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" }}}
