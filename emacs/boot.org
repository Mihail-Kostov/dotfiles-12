#+STARTUP: indent
#+STARTUP: overview

* lisp functions
** spacemacs/buffer operations
*** spacemacs/alternate-buffer
SPC TAB
back and forth between current and last buffer
#+BEGIN_SRC emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))
#+END_SRC

*** spacemacs/kill-this-buffer
SPC b d
#+BEGIN_SRC emacs-lisp
(defun spacemacs/kill-this-buffer (&optional arg)
  "Kill the current buffer.
If the universal prefix argument is used then kill also the window."
  (interactive "P")
  (if (window-minibuffer-p)
      (abort-recursive-edit)
    (if (equal '(4) arg)
        (kill-buffer-and-window)
      (kill-buffer))))
#+END_SRC

** spacemacs/align functions
#+BEGIN_SRC emacs-lisp
;; BEGIN align functions

;; modified function from http://emacswiki.org/emacs/AlignCommands
(defun spacemacs/align-repeat (start end regexp &optional justify-right after)
  "Repeat alignment with respect to the given regular expression.
If JUSTIFY-RIGHT is non nil justify to the right instead of the
left. If AFTER is non-nil, add whitespace to the left instead of
the right."
 
 (interactive "r\nsAlign regexp: ")
  (let* ((ws-regexp (if (string-empty-p regexp)
                        "\\(\\s-+\\)"
                      "\\(\\s-*\\)"))
         (complete-regexp (if after
                              (concat regexp ws-regexp)
                            (concat ws-regexp regexp)))
         (group (if justify-right -1 1)))
    (message "%S" complete-regexp)
    (align-regexp start end complete-regexp group 1 t)))

;; Modified answer from http://emacs.stackexchange.com/questions/47/align-vertical-columns-of-numbers-on-the-decimal-point
(defun spacemacs/align-repeat-decimal (start end)
  "Align a table of numbers on decimal points and dollar signs (both optional)"
  (interactive "r")
  (require 'align)
  (align-region start end nil
                '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                       (repeat . t)
                       (group 1 2)
                       (spacing 1 1)
                       (justify nil t)))
                nil))

(defmacro spacemacs|create-align-repeat-x (name regexp &optional justify-right default-after)
  (let ((new-func (intern (concat "spacemacs/align-repeat-" name))))
    `(defun ,new-func (start end switch)
       (interactive "r\nP")
       (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
         (spacemacs/align-repeat start end ,regexp ,justify-right after)))))

(spacemacs|create-align-repeat-x "comma" "," nil t)
(spacemacs|create-align-repeat-x "semicolon" ";" nil t)
(spacemacs|create-align-repeat-x "colon" ":" nil t)
(spacemacs|create-align-repeat-x "equal" "=")
(spacemacs|create-align-repeat-x "math-oper" "[+\\-*/]")
(spacemacs|create-align-repeat-x "ampersand" "&")
(spacemacs|create-align-repeat-x "bar" "|")
(spacemacs|create-align-repeat-x "left-paren" "(")
(spacemacs|create-align-repeat-x "right-paren" ")" t)
(spacemacs|create-align-repeat-x "backslash" "\\\\")

;; END align functions
#+END_SRC

** spacemacs/window splits
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-focus ()
  "Split the window vertically and focus the new window."
  (interactive)
  (split-window-below)
  (windmove-down)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))

(defun split-window-right-and-focus ()
  "Split the window horizontally and focus the new window."
  (interactive)
  (split-window-right)
  (windmove-right)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))
#+END_SRC

** emacs-prelude
#+BEGIN_SRC emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC



** clipboard
#+BEGIN_SRC emacs-lisp
(defun copy-to-clipboard ()
  "Copies selection to x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "pbcopy")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
  )

(defun paste-from-clipboard ()
  "Pastes from x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "pbpaste"))
    )
  )
#+END_SRC

** revert-buffer with no confirmation
- from [[http://www.emacswiki.org/emacs-en/download/misc-cmds.el][emacswiki]]
#+BEGIN_SRC emacs-lisp
(defun nin-revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+END_SRC

** my lisp functions
*** nin-echo
#+BEGIN_SRC emacs-lisp
(defun nin-echo ()
  "just a simple test message for binds"
  (interactive)
  (message "the bind worked! yes!!"))
#+END_SRC

** org functions
*** move cell down
- credits go to [[https://www.reddit.com/r/emacs/comments/583n1x/movecopy_a_cel_to_the_right/][/u/gmfawcett]]
#+BEGIN_SRC emacs-lisp
(defun nin-org-mv-down ()           ; moves a value down
  (interactive)
  (let ((pos (point))               ; get current pos
        (f (org-table-get-field)))  ; copy current field
    (org-table-blank-field)         ; blank current field
    (org-table-next-row)            ; move cursor down
    (org-table-blank-field)         ; blank that field too
    (insert f)                      ; insert the value from above
    (org-table-align)               ; realign the table
    (goto-char pos)))               ; move back to original position
#+END_SRC

*** swap cell down
- credits go to [[https://www.reddit.com/r/emacs/comments/583n1x/movecopy_a_cel_to_the_right/][/u/gmfawcett]]
#+BEGIN_SRC emacs-lisp
(defun nin-org-swap-down ()               ; swap with value below
  (interactive)
  (let ((pos (point))                   ; get current pos
        (v1 (org-table-get-field)))     ; copy current field
    (org-table-blank-field)             ; blank current field
    (org-table-next-row)                ; move cursor down
    (let ((v2 (org-table-get-field)))   ; take copy of that field, too
      (org-table-blank-field)           ; blank that field too
      (insert v1)                       ; insert the value from above
      (goto-char pos)                   ; go to original location
      (insert v2)                       ; insert the value from below
      (org-table-align)                 ; realign the table
      (goto-char pos))))                ; move back to original position
#+END_SRC

** origami functions
- with help from [[https://www.reddit.com/r/emacs/comments/580v30/tweaking_origamiel_lisp_and_regexes/][reddit]]
#+BEGIN_SRC emacs-lisp
(defun nin-origami-toggle-node ()
 (interactive)
 (save-excursion ;; leave point where it is
  (goto-char (point-at-eol))             ;; then go to the end of line
  (origami-toggle-node (current-buffer) (point))))                 ;; and try to fold
#+END_SRC

* tweaks
** scratch buffer tweaks
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message "#+STARTUP: indent\n#+STARTUP: overview\n\n* this is an org-mode scratch buffer\n| A | B |\n| 1 | 2 |\n| 3 | 4 |")
#+END_SRC

** ui
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; save last cursor position
  (save-place-mode 1) 
  ;; (setq save-place-file (locate-user-emacs-file "places" "emacs-places"))

  ;;highlight current line
  ;;(global-hl-line-mode)
#+END_SRC

** gui
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    ;; emacs without X does not have scrollbars
    (scroll-bar-mode -1)

    ;; osx does not lose screen real state with menu bar mode on
    (when (eq system-type 'darwin)
      (progn
        ;; start maximized
        (toggle-frame-maximized)
        (set-frame-parameter nil 'fullscreen 'fullboth)
        (menu-bar-mode 1))))
#+END_SRC

** indentation
#+BEGIN_SRC emacs-lisp
(setq-default js-basic-offset 2
                sh-basic-offset 2
                sh-indentation 2
                indent-tabs-mode nil)
#+END_SRC

** font
*** Monoisome
- get it at [[https://github.com/larsenwork/monoid][larsenwork/monoid]]
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Monoisome-14"))
  #+END_SRC

** backups
- lifted from [[https://github.com/magnars/.emacs.d/blob/master/init.el][magnar's emacs.d]]
#+BEGIN_SRC emacs-lisp
;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)
#+END_SRC

** garbage collection tuning
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

** move custom data out of init.el
- more info [[http://irreal.org/blog/?p=3765][here]]
- and [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][here (M-x all-things-emacs)]]
  #+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-customizations.el")
(load custom-file 'noerror)
  #+END_SRC

** org-mode
*** general configs
- somewhat lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
    '((sequence "☛ TODO" "○ IN-PROGRESS" "⚑ WAITING" "|" "✓ DONE" "✗ CANCELED")))

(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
(setq org-log-done (quote time))
(setq org-log-redeadline (quote time))
(setq org-log-reschedule (quote time))
#+END_SRC

*** org capture
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("a" "My TODO task format." entry
         (file "~/code/sources/life/inbox.org")
         "* ☛ TODO %?
SCHEDULED: %t")))
(defun air-org-task-capture ()
  "Capture a task with my default template."
  (interactive)
  (org-capture nil "a"))
#+END_SRC

*** org agenda
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO" "WIP" "WAITING" "|" "DONE" "CANCELED")))


  (setq org-agenda-files '("~/code/sources/life/"))

  (defun air-pop-to-org-agenda (split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda-list)
    (when (not split)
      (delete-other-windows)))

  (setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC

* packages
** cosmetic
*** theme
**** darktooth
#+BEGIN_SRC emacs-lisp
  (use-package darktooth-theme :ensure t)
  (load-theme 'darktooth t)
#+END_SRC

**** gruvbox
  #+BEGIN_SRC emacs-lisp
    ;; (use-package gruvbox-theme :ensure t)
    ;; (load-theme 'gruvbox t)
  #+END_SRC

**** spacemacs
  #+BEGIN_SRC emacs-lisp
    ;; (use-package spacemacs-theme :ensure t)
    ;; (load-theme 'spacemacs-dark t)
  #+END_SRC

**** material
#+BEGIN_SRC emacs-lisp
  ;; (use-package material-theme :ensure t)
  ;; (load-theme 'material t)
  ;; (load-theme 'material-light t)
#+END_SRC

**** zenburn
#+BEGIN_SRC emacs-lisp
  ;; (use-package zenburn-theme :ensure t)
  ;; (load-theme 'zenburn t)
#+END_SRC

**** leuven
#+BEGIN_SRC emacs-lisp
  ;; (load-theme 'leuven t)
#+END_SRC

*** spaceline
- to see an exhaustive separator list see [[https://github.com/milkypostman/powerline/blob/master/powerline-separators.el#L9-L11][here]].
#+BEGIN_SRC emacs-lisp
  (use-package spaceline :ensure t
    :config
      (setq powerline-height 30)

      ;; customize separators for Powerline.
      ;; Included separators: alternate, slant, wave, zigzag, nil.
      ;; (setq ns-use-srgb-colorspace nil)
      (setq powerline-default-separator 'utf-8)
      (setq spaceline-separator-dir-left '(right . left))
      (setq spaceline-separator-dir-right '(left . right))
      (setq powerline-default-separator 'alternate)

      ;; hack: is for eyebrowse. nice looking unicode numbers for tagging different layouts
      ;; lifted from TheBB/spaceline readme.md
      (setq spaceline-workspace-numbers-unicode t)
      (setq spaceline-window-numbers-unicode t)

      ;; set colouring for different evil-states
      (setq spaceline-highlight-face-func #'spaceline-highlight-face-evil-state)

      ;; hack: customize display time in spaceline. 
      ;; lifted from https://www.reddit.com/r/emacs/comments/2ziinn/displaytimemode_but_not_system_load/
      (setq display-time-default-load-average nil)

      (require 'spaceline-config)
      (spaceline-spacemacs-theme)
      (display-time-mode)
      (spaceline-compile)
  )
#+END_SRC


*** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters :ensure t
  :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

*** highlight-parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses :ensure t
    :diminish highlight-parentheses-mode
    :config
        (add-hook 'prog-mode-hook #'highlight-parentheses-mode)
        (add-hook 'org-mode-hook #'highlight-parentheses-mode)
        (setq hl-paren-delay 0.2)
        (setq hl-paren-colors '("Springgreen3"
                                "IndianRed1"
                                "IndianRed3"
                                "IndianRed4"))
        (set-face-attribute 'hl-paren-face nil :weight 'ultra-bold))
#+END_SRC

** expand funcionality
*** restart-emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs :ensure t)
#+END_SRC

*** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse :ensure t
  :config
    (setq eyebrowse-wrap-around t)
    (eyebrowse-mode t)
)
#+END_SRC

*** multi-term
#+BEGIN_SRC emacs-lisp
(use-package multi-term :ensure t
  :config (setq multi-term-program "/bin/zsh"))
#+END_SRC

*** avy
  #+BEGIN_SRC emacs-lisp
(use-package avy :ensure t)
  #+END_SRC

*** ag: the silver searcher
#+BEGIN_SRC emacs-lisp
(use-package ag :ensure t)
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens :ensure t
    :config
     ;; Always start smartparens mode in js-mode.
     ;; (add-hook 'js-mode-hook #'smartparens-mode)
     (add-hook 'prog-mode-hook #'smartparens-mode)
     (add-hook 'org-mode-hook #'smartparens-mode)
  )
#+END_SRC

*** origami
#+BEGIN_SRC emacs-lisp
(use-package origami :ensure t
  :config 
    (add-hook 'prog-mode-hook 
      (lambda () 
        (setq-local origami-fold-style 'triple-braces)
        (origami-mode)
        (origami-close-all-nodes (current-buffer)))))
#+END_SRC

** keybinds
*** which key
  #+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure t 
    :diminish which-key-mode
	:config (which-key-mode))
  #+END_SRC

*** bind-map
#+BEGIN_SRC emacs-lisp
(use-package bind-map :ensure t)
#+END_SRC

*** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra :ensure t
  :config
    (use-package ivy-hydra :ensure t))
#+END_SRC

*** evil corruption
**** evil
- emacsify insert state. based on this SO question [[http://stackoverflow.com/a/26573722/4921402][here]].
#+BEGIN_SRC emacs-lisp
  (use-package evil :ensure t
    :config 

    ;; remove all keybindings from insert-state keymap just
    ;; because I want to use emacs keybindings in insert state.
    (setcdr evil-insert-state-map nil)

    ;; but [escape] should switch back to normal state, obviously.
    (define-key evil-insert-state-map [escape] 'evil-normal-state)

    (evil-mode))
#+END_SRC

**** evil-commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary :ensure t
  :diminish evil-commentary-mode
  :config (evil-commentary-mode))
#+END_SRC

**** evil-matchit
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit :ensure t
  :config (global-evil-matchit-mode 1))
#+END_SRC

**** evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround :ensure t
  :config (global-evil-surround-mode 1))
#+END_SRC

**** evil-exchange
#+BEGIN_SRC emacs-lisp
(use-package evil-exchange :ensure t
  :config (evil-exchange-install))
#+END_SRC

**** evil-args
#+begin_src emacs-lisp
(use-package evil-args :ensure t
  :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
)
#+end_src

**** evil-visualstar
#+begin_src emacs-lisp
(use-package evil-visualstar :ensure t
  :config (global-evil-visualstar-mode))
#+end_src

**** evil-indent-plus
#+begin_src emacs-lisp
(use-package evil-indent-plus :ensure t
  :config (evil-indent-plus-default-bindings))
#+end_src

**** evil-anzu
- config section hack: see [[https://github.com/TheBB/spaceline/issues/69][TheBB/spaceline#69]]
#+BEGIN_SRC emacs-lisp
(use-package evil-anzu :ensure t
  :config (setq anzu-cons-mode-line-p nil))
#+END_SRC

**** evil-numbers
#+BEGIN_SRC emacs-lisp
(use-package evil-numbers :ensure t)
#+END_SRC

** file browsing
*** projectile
- the projectile-switch-project-action hack was lifted from [[projectile-switch-project-action][here]].
#+BEGIN_SRC emacs-lisp
(use-package projectile :ensure t
  :diminish projectile-mode
  :config
    (add-hook 'after-init-hook 'projectile-mode)
    (use-package counsel-projectile :ensure t)
    (setq projectile-completion-system 'ivy)   

    ;; not used because `SPC-gs' is sealing the deal for the moment
    ;;(setq projectile-switch-project-action 'projectile-vc)
)
#+END_SRC

*** ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger :ensure t
    :config
        (ranger-override-dired-mode t)
        (setq ranger-cleanup-on-disable t)
        (setq ranger-show-dotfiles t)
        (setq ranger-hide-cursor nil))
#+END_SRC

** magit
- for more info about magit-display-buffer-function, see [[http://stackoverflow.com/q/39933868/4921402][here]].
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t
    :config
      ;;(setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
      (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
      (setq magit-repository-directories '("~/code/sources"))
      (use-package evil-magit :ensure t)
  )
#+END_SRC

** org
*** Org Bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (progn
        (when (display-graphic-p)
          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
        (setq org-ellipsis "…")))

;Other interesting characters are ▼, ↴, ⬎, ⤷,…, and ⋱.
;(setq org-ellipsis "⤵")
  #+END_SRC

*** Reveal.js
  #+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure t)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize 
  :ensure t)
  #+END_SRC
** completions
*** ivy/counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (ivy-mode 1)
      (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
      (use-package counsel :ensure t)
  )
#+END_SRC

*** company
#+BEGIN_SRC emacs-lisp
(use-package company :ensure t
  :config
    (add-hook 'after-init-hook 'global-company-mode)
    ;; TODO: could we use TAB?
    (define-key company-mode-map (kbd "C-SPC") 'company-complete)
)
#+END_SRC

*** yasnippet
  #+BEGIN_SRC emacs-lisp
(use-package yasnippet :ensure t
  :config (yas-global-mode 1))
  #+END_SRC

*** flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck :ensure t
      :config (global-flycheck-mode t))
  #+END_SRC

** filetypes
*** md: markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** html: web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

      (defun my-web-mode-hook ()
        "Hooks for Web mode."
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset    2)
        (setq web-mode-code-indent-offset   2))
      (add-hook 'web-mode-hook 'my-web-mode-hook))
#+END_SRC

*** js: js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode :ensure t
  :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC

*** vimrc: vimrc mode
#+BEGIN_SRC emacs-lisp
(use-package vimrc-mode :ensure t)
#+END_SRC

*** docker: dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode :ensure t
  :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

*** gitconfig-mode
#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode :ensure t)
#+END_SRC

* fixes
** yasnippet hijacks TAB key in term mode
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook 'my-term-mode-hook)
(defun my-term-mode-hook ()
  (yas-minor-mode -1))
#+END_SRC

** make zsh with bindkey -v and ansi-term be friendly to each other [[https://github.com/syl20bnr/spacemacs/issues/7140][syl20bnr/spacemacs#7140]]
*** TheBB's solution
- shamelessly lifted from github.com/TheBB's config
- not working though.
#+BEGIN_SRC emacs-lisp
  ;(evil-set-initial-state 'term-mode 'emacs)
  ;(push 'term-mode evil-escape-excluded-major-modes)
#+END_SRC

*** @chadhs tip
#+BEGIN_SRC emacs-lisp
  ;; (evil-define-key 'normal term-raw-map "p" 'term-paste)
  (evil-define-key 'normal term-raw-map "j" 'term-send-down)
  (evil-define-key 'normal term-raw-map "k" 'term-send-up)
  ;; (evil-define-key 'normal term-raw-map "/" 'term-send-reverse-search-history)
  ;; (evil-define-key 'normal term-raw-map (kbd "C-c") 'term-send-raw)
  ;; (evil-define-key 'insert term-raw-map (kbd "C-c") 'term-send-raw)
#+END_SRC

** fix $PATH on macosx with exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
      (use-package exec-path-from-shell
        :ensure t
        :config
          (exec-path-from-shell-initialize)))
#+END_SRC

** diminishes
#+BEGIN_SRC emacs-lisp
(diminish 'undo-tree-mode)
(diminish 'auto-revert-mode)
(diminish 'org-indent-mode)
(diminish 'smartparens-mode)
(diminish 'flyspell-mode "FlyS")
(diminish 'flycheck-mode "FlyC")
#+END_SRC

** M-x man
- [[http://emacs.stackexchange.com/a/10669/12585][list]] of evil states: 
- with [[https://github.com/syl20bnr/spacemacs/issues/7346][help]] from @TheBB 
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "man" 
      (evil-set-initial-state 'Man-mode 'normal)
      (setq Man-notify-method 'pushy)
  )
#+END_SRC

* binds
** evil
*** abusing the g prefix
#+BEGIN_SRC emacs-lisp
;; faster than `gg' and `G`.
(define-key evil-motion-state-map "go" 'evil-goto-first-line)
(define-key evil-motion-state-map "gl" 'evil-goto-line)

;; magit status
(define-key evil-motion-state-map "gs" 'magit-status)

;; counsel-projectile
(define-key evil-motion-state-map "g." 'counsel-projectile)

;; swiper
(define-key evil-motion-state-map "g/" 'swiper)

;; counsel-recentf
(define-key evil-motion-state-map "gh" 'counsel-recentf)

;;custom pagedowns and pageups
(define-key evil-motion-state-map "g9" (kbd "Hz-M"))
(define-key evil-motion-state-map "g0" (kbd "LztM"))

(define-key evil-motion-state-map (kbd "<f1>") 'eyebrowse-switch-to-window-config-1)
(define-key evil-motion-state-map (kbd "<f2>") 'eyebrowse-switch-to-window-config-2)
(define-key evil-motion-state-map (kbd "<f3>") 'eyebrowse-switch-to-window-config-3)
(define-key evil-motion-state-map (kbd "<f4>") 'eyebrowse-switch-to-window-config-4)

(define-key evil-motion-state-map "g1" 'eyebrowse-switch-to-window-config-1)
(define-key evil-motion-state-map "g2" 'eyebrowse-switch-to-window-config-2)
(define-key evil-motion-state-map "g3" 'eyebrowse-switch-to-window-config-3)
(define-key evil-motion-state-map "g4" 'eyebrowse-switch-to-window-config-4)

(define-key evil-motion-state-map "g4" 'eyebrowse-switch-to-window-config-4)

(define-key evil-motion-state-map "gp" 'pop-global-mark)

;; turn off search highlight (muscle memory)
;;(define-key evil-motion-state-map "g-" 'available)
#+END_SRC

*** comfort improvements
#+BEGIN_SRC emacs-lisp
;; toggle fold: faster and more comfortable than `za'
;; `cl' is a complete replacement for `s'
(define-key evil-normal-state-map "s" 'evil-toggle-fold)

;; save: faster than `:w'
(define-key evil-normal-state-map (kbd "RET") 'evil-write)

;; file/buffer selection
(define-key evil-normal-state-map (kbd "TAB") 'ivy-switch-buffer)
(define-key evil-normal-state-map (kbd "DEL") 'counsel-find-file)

(define-key evil-normal-state-map "-" 'evil-ex-nohighlight)

;; invertion of `'` and `"`
(define-key evil-normal-state-map "'" 'evil-use-register)
(define-key evil-normal-state-map "\"" 'evil-goto-mark-line)

;; invert `{' and `)'. used way more then { and }
(define-key evil-motion-state-map "(" 'evil-backward-paragraph)
(define-key evil-motion-state-map ")" 'evil-forward-paragraph)

;; `Q' is my new `q'. open up q prefix for abuse.
(define-key evil-normal-state-map "Q" 'evil-record-macro)
#+END_SRC

*** fixes
#+BEGIN_SRC emacs-lisp
  ;; As I've sequestered < and > when in org mode, we need a workaround.
  (define-key evil-motion-state-map "g>" 'evil-shift-right)
  (define-key evil-motion-state-map "g<" 'evil-shift-left)

  ;; `z.' fix
  (define-key evil-normal-state-map "z." 'evil-scroll-line-to-center)

  ;; `z-' fix
  (define-key evil-normal-state-map "z-" 'evil-scroll-line-to-bottom)

  ;; make / and ? behave like vim
  (define-key isearch-mode-map (kbd "<escape>") 'isearch-cancel)
  (define-key evil-ex-search-keymap (kbd "<escape>") 'minibuffer-keyboard-quit)

  ;; instantly display current keystrokes in mini buffer
  (setq echo-keystrokes 0.02)

  ;; auto-indent on RET
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** SPC
*** bind-map
#+BEGIN_SRC emacs-lisp
(bind-map spc-map
    :evil-keys ("SPC")
    :evil-states (normal visual motion))
#+END_SRC

*** core/directs
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "<SPC>" 'counsel-M-x
    ;; "TAB" 'available
  )
#+END_SRC

*** a: align
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "aa" 'align
  "ac" 'align-current
  "am" 'spacemacs/align-repeat-math-oper
  "ar" 'spacemacs/align-repeat

  "a&" 'spacemacs/align-repeat-ampersand
  "a(" 'spacemacs/align-repeat-left-paren
  "a)" 'spacemacs/align-repeat-right-paren
  "a," 'spacemacs/align-repeat-comma
  "a." 'spacemacs/align-repeat-decimal
  "a:" 'spacemacs/align-repeat-colon
  "a;" 'spacemacs/align-repeat-semicolon
  "a=" 'spacemacs/align-repeat-equal
  "a\\" 'spacemacs/align-repeat-backslash
  "a|" 'spacemacs/align-repeat-bar
)
(which-key-declare-prefixes "SPC a" "align")

#+END_SRC

*** d: docs, descriptions, help
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "db" 'counsel-descbinds
    "dc" 'describe-char
    "df" 'counsel-describe-function
    "dk" 'describe-key
    "dv" 'counsel-describe-variable)
  (which-key-declare-prefixes "SPC d" "docs/descriptions/help")
#+END_SRC

*** e: eyebrowse
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
    "ec" 'eyebrowse-create-window-config
    "en" 'eyebrowse-next-window-config
    "er" 'eyebrowse-rename-window-config
    "es" 'eyebrowse-switch-to-window-config
)
(which-key-declare-prefixes "SPC e" "eyebrowse")
#+END_SRC

*** f: files and directories
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "fc" 'make-directory
    "fd" 'cd
    "fj" 'dired-jump
    "fp" 'prelude-copy-file-name-to-clipboard
    "fr" 'nin-revert-buffer-no-confirm
  )
  (which-key-declare-prefixes "SPC f" "file/dir operations")
#+END_SRC

*** g: git
- *lift*: the below magit SPC gs bind hack was lifted from [[http://emacs.stackexchange.com/a/27623/12585][this]] SO answer.
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "gf" 'magit-log-buffer-file
  "gs" (lambda () (interactive) 
         (magit-status (magit-read-repository 
           (>= (prefix-numeric-value current-prefix-arg) 16))))
)
(which-key-declare-prefixes "SPC g" "[ma]git operations")
(which-key-add-key-based-replacements "SPC gs" "repo magit status")
#+END_SRC

*** h: hydras
**** z: zoom
#+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (spc-map "hz")
  "zoom"
  ("i" text-scale-increase "in")
  ("o" text-scale-decrease "out"))
(which-key-declare-prefixes "SPC h" "hydras")
(which-key-add-key-based-replacements "SPC hz" "zooming hydra")
#+END_SRC

*** i: ivy
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "is" 'ivy-push-view
    "ik" 'ivy-pop-view
    "ia" 'counsel-ag
  )
  (which-key-declare-prefixes "SPC i" "ivy")
#+END_SRC

*** l: lisp evaluation
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "ll" 'eval-last-sexp)
  (which-key-declare-prefixes "SPC l" "evaluation")
#+END_SRC

*** m: M-x useful functions
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "ms" 'sort-lines
    "mc" 'count-words
    "mr" 'replace-string
  )
  (which-key-declare-prefixes "SPC m" "M-x useful functions")
#+END_SRC

*** o: org-mode
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "oc" 'air-org-task-capture
    "oa" 'air-pop-to-org-agenda
    "ot" 'org-table-convert-region
  )
  (which-key-declare-prefixes "SPC o" "org-mode")
#+END_SRC

*** p: projectile
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "pa" 'projectile-ag
  "ps" 'counsel-projectile-switch-project
)
(which-key-declare-prefixes "SPC p" "projectile")
#+END_SRC

*** s: spelling
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "sw" 'ispell-word
  "se" (lambda () (interactive) (ispell-change-dictionary "english"))
  "sp" (lambda () (interactive) (ispell-change-dictionary "pt_BR"))
  "sk" (lambda () (interactive) (flyspell-mode -1))
  "ss" (lambda () (interactive) (flyspell-mode 1))
)
(which-key-declare-prefixes "SPC s" "spelling")
(which-key-add-key-based-replacements
  "SPC sw" "ispell: check word"
  "SPC se" "ispell: use english dictionary"
  "SPC sp" "ispell: use pt_BR dictionary"
  "SPC sk" "turn off flyspell mode"
  "SPC ss" "turn on flyspell mode"
)
#+END_SRC

*** t: terminals
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "ta" 'ansi-term
    "te" 'eshell

    ;; multi-term
    "tt"  'multi-term
    "tn" 'multi-term-next
    "tp" 'multi-term-prev
  )
  (which-key-declare-prefixes "SPC t" "terminals")
  (which-key-declare-prefixes "SPC tm" "multi-term")
#+END_SRC

#+RESULTS:

*** x: useful M-x commands
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "xm" 'man
    "xw" 'woman
  )
  (which-key-declare-prefixes "SPC x" "useful M-x commands")
#+END_SRC

*** E: evil
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
    "Eu" 'undo-tree-visualize
    "E+" 'evil-numbers/inc-at-pt
    "E-" 'evil-numbers/dec-at-pt
)
(which-key-declare-prefixes "SPC E" "evil-mode")
#+END_SRC

** q
#+BEGIN_SRC emacs-lisp
(bind-map q-map 
    :evil-keys ("q")
    :evil-states (normal visual))

  ;; quits: file saves, buffer deletes, window exits, you name it...
  (bind-map-set-keys q-map
    "c" 'evil-save-modified-and-close
    "e" 'evil-quit
    "r" 'restart-emacs
    "d" 'kill-this-buffer
      
    "j" 'evil-window-down
    "k" 'evil-window-up
    "h" 'evil-window-left
    "l" 'evil-window-right

    "o" 'delete-other-windows

    "v" 'split-window-right-and-focus
    "x" 'split-window-below-and-focus
  )
#+END_SRC

** modes
*** org
**** bind-map
#+BEGIN_SRC emacs-lisp
(bind-map org-map
    :evil-keys (",")
    :evil-states (normal visual)
    :major-modes (org-mode))
#+END_SRC

**** local leader
***** b: bullets
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-map
    "bb" 'org-ctrl-c-star
    "b-" 'org-ctrl-c-minus
  )
  (which-key-declare-prefixes ", b" "bullets")
#+END_SRC

***** c: code
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-map
    "cc" 'org-edit-src-code
    "cb" 'org-babel-execute-src-block
  )
  (which-key-declare-prefixes ", c" "code editing")
#+END_SRC

***** d: dates/schedulling
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-map
    "dd" 'org-schedule
  )
  (which-key-declare-prefixes ", d" "dates/schedule")
#+END_SRC

***** i: insertions
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  "ih" 'org-insert-heading
  "ia" 'org-insert-heading-after-current
  "ir" 'org-insert-heading-respect-content
  "is" 'org-insert-subheading
  "il" 'org-insert-link
  "io" 'org-open-at-point
  "iL" 'org-toggle-link-display
)
(which-key-declare-prefixes ", i" "insertions/additions")
#+END_SRC


***** l: label/tag
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-map
    "ll" 'counsel-org-tag
  )
  (which-key-add-major-mode-key-based-replacements 'org-mode ", l" "label/tag")
#+END_SRC

***** m: meta
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-map
    "ml" 'org-metaright
    "mh" 'org-metaleft
    "mj" 'org-metadown
    "mk" 'org-metaup
    "m RET"  'org-meta-return
  )
  (which-key-declare-prefixes ", m" "org-meta")
#+END_SRC

***** o: interesting org commands
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-map


    ;; from: http://emacsist.com/10284 
    "or" 'org-refile
    
    "ot" 'org-table-convert-region
  )
  (which-key-declare-prefixes ", o" "interesting org commands")
#+END_SRC

***** s: subtree commands
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  ;; subtree commands
  "sh" 'org-promote-subtree
  "sl" 'org-demote-subtree
  "sk" 'org-move-subtree-up
  "sj" 'org-move-subtree-down
  "sy" 'org-copy-subtree
  "sd" 'org-cut-subtree
  "sp" 'org-paste-subtree
  "ss" 'org-show-subtree
  "sc" 'org-clone-subtree-with-time-shift)
(which-key-declare-prefixes ", s" "org subtree operations")
#+END_SRC

***** t: table
****** ☛ TODO lift more binds from [[http://orgmode.org/manual/Built_002din-table-editor.html][here]]:
#+BEGIN_SRC emacs-lisp
    (bind-map-set-keys org-map
      "ta" 'org-table-align
      "tt" 'org-table-transpose-table-at-point

      "th" 'org-backward-sentence
      "tl" 'org-forward-sentence

      "tdc" 'org-table-delete-column

      ;; from https://www.reddit.com/r/emacs/comments/56oc9c/orgtables_is_there_a_way_to_delete_a_whole_table/
      ;; fist place point in the top left bar (`|')
      "tm" 'org-mark-element

      "tr" 'org-table-insert-row
      "tc" 'org-table-insert-column
    
      "to" 'org-table-toggle-coordinate-overlays
      "t?" 'org-table-field-info
      "t=" 'org-table-eval-formula

      "tf" (lambda () (interactive) 
            (let ((current-prefix-arg 4))
            (call-interactively 'org-table-recalculate))
           )

      "t RET" 'org-table-copy-down
    )
  (which-key-add-major-mode-key-based-replacements 'org-mode ", t" "org-table")
  (which-key-add-major-mode-key-based-replacements 'org-mode ", td" "org-table deletions")
  (which-key-add-major-mode-key-based-replacements 'org-mode ", tf" "recalculate formulas")
#+END_SRC

***** z: zoom / visualization
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  "zi" 'org-narrow-to-subtree
  "zo" 'widen)
(which-key-declare-prefixes ", z" "zoom")
#+END_SRC

***** E: exports
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  "Ed" 'org-export-dispatch
)
(which-key-declare-prefixes ", E" "Exports")
#+END_SRC

***** *-=: others
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-map
  ;; cycle
  "TAB" 'org-cycle)
#+END_SRC

**** local fixes
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "TAB") 'ivy-switch-buffer)
  (when (display-graphic-p)
    (evil-define-key 'normal org-mode-map (kbd "<tab>") 'ivy-switch-buffer))

  (evil-define-key 'normal org-mode-map (kbd "RET") 'evil-write)

  ;; movement
  (evil-define-key 'normal org-mode-map "zu" 'outline-up-heading)
  (evil-define-key 'normal org-mode-map "zh" 'outline-previous-visible-heading)
  (evil-define-key 'normal org-mode-map "zj" 'org-forward-heading-same-level)
  (evil-define-key 'normal org-mode-map "zk" 'org-backward-heading-same-level)
  (evil-define-key 'normal org-mode-map "zl" 'outline-next-visible-heading)

  (evil-define-key 'normal org-mode-map "<" 'org-do-promote)
  (evil-define-key 'normal org-mode-map ">" 'org-do-demote)

  (evil-define-key 'normal org-mode-map "t" 'org-todo)
  #+END_SRC

*** term
- with help from [[https://www.reddit.com/r/emacs/comments/56xmvg/properly_editing_a_shell_buffer_with_evilmode/][/r/emacs]]
#+BEGIN_SRC emacs-lisp
(bind-map term-map
    :evil-keys (",")
    :evil-states (normal visual)
    :major-modes (term-mode))

(bind-map-set-keys term-map
  "l" 'term-line-mode
  "c" 'term-char-mode
)
(which-key-add-major-mode-key-based-replacements 'term-mode ", l" "line mode")
(which-key-add-major-mode-key-based-replacements 'term-mode ", c" "char mode")
#+END_SRC

*** dired
**** fix: unhijack my precious SPC leader key.
- lifted from this [[http://stackoverflow.com/a/10672548/4921402][SO question]]
#+BEGIN_SRC emacs-lisp
(define-key dired-mode-map (kbd "SPC") nil)
#+END_SRC

*** magit
#+BEGIN_SRC emacs-lisp
(define-key magit-status-mode-map (kbd "SPC") nil)
(define-key magit-status-mode-map "go" 'evil-goto-first-line)
#+END_SRC

*** eshell
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal eshell-mode-map (kbd "TAB") 'ivy-switch-buffer)
  (when (display-graphic-p)
    (evil-define-key 'normal eshell-mode-map (kbd "<tab>") 'ivy-switch-buffer))
#+END_SRC

*** prog-mode
#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal prog-mode-map "s" 'nin-origami-toggle-node)
#+END_SRC

** awesome available binds
*** g prefix
- gr
- gt

- gT

*** SPC leader
- TAB
- / 
- .
- ;
- ,
- -

- ?
    
