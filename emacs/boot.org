#+STARTUP: indent
#+STARTUP: overview

* lisp
** lisp-intro-tutorial-exercises
*** CH02. Evaluation
1. Find a file with which you are working and move towards its middle.
2. Find its buffer name, file name, length, and your position in the file.
#+BEGIN_SRC emacs-lisp
  (defun ninrod/lisp-intro/move-to-middle ()
    "Move point to the middle of the file "
    (interactive)
    (goto-char (/ (buffer-size) 2)))

  (defun ninrod/lisp-intro/file-info ()
    "Echo information about the current buffer."
    (interactive)
    (let ((bname (buffer-name))
           (fname (buffer-file-name))
           (bsize (buffer-size))
           (bpos  (point)))
      (message "bname: %s, fname: %s, bsize: %d, bpos: %d" bname fname bsize bpos)))
#+END_SRC
*** CH03. Writing defuns
***** write a function that doubles a number
1. write a non-interactive function that doubles the value of its argument, a number.
2. make the above function interactive
#+begin_src emacs-lisp
  (defun ninrod/lisp-intro/double-number (number)
    "doubles the number passed in as argument."
    (interactive "p")
    (message "if i double this number it will became %d" (* 2 number)))
#+end_src
***** fill-column test
+ write a function that tests whether the current value of `fill-column'
is greater than the argument passed to the function, and if so, prints
an appropriate message.
#+begin_src emacs-lisp
  (defun ninrod/lisp-intro/fill-test (test)
    "tests if the argument is greater than fill-column."
    (interactive "p")
    (if (> test fill-column)
        (message "the passed argument, %d is greater than fill-column, %d" test fill-column)
      (message "fill-column (%d) is equal or greater than the argument (%d)" fill-column test)))
#+end_src
*** CH04. Buffer walk through
***** Write your own `simplified-end-of-buffer' function definition; then test it to see whether it works.
#+BEGIN_SRC emacs-lisp
  (defun ninrod/lisp-intro/buffer-end ()
    "Move point to the end of the buffer."
    (interactive)
    (push-mark)
    (goto-char (point-max)))
#+END_SRC
***** Use `if' and `get-buffer' to write a function that prints a message telling you whether a buffer exists.
#+BEGIN_SRC emacs-lisp
  (defun ninrod/lisp-intro/buffer-exists (bufstr)
    "Print something if BUFSTR exists as a buffer."
    (interactive (list (read-buffer
                        "Buffer to check: "
                        (other-buffer (current-buffer) t))))
    (if (get-buffer bufstr)
        (message "BUFSTR %s is a valid buffer." bufstr)
      (message "BUFSTR %s does not exist." bufstr)))
#+END_SRC
** spacemacs/aligns
#+BEGIN_SRC emacs-lisp
;; BEGIN align functions

;; modified function from http://emacswiki.org/emacs/AlignCommands
(defun spacemacs/align-repeat (start end regexp &optional justify-right after)
  "Repeat alignment with respect to the given regular expression.
If JUSTIFY-RIGHT is non nil justify to the right instead of the
left. If AFTER is non-nil, add whitespace to the left instead of
the right."

 (interactive "r\nsAlign regexp: ")
  (let* ((ws-regexp (if (string-empty-p regexp)
                        "\\(\\s-+\\)"
                      "\\(\\s-*\\)"))
         (complete-regexp (if after
                              (concat regexp ws-regexp)
                            (concat ws-regexp regexp)))
         (group (if justify-right -1 1)))
    (message "%S" complete-regexp)
    (align-regexp start end complete-regexp group 1 t)))

;; Modified answer from http://emacs.stackexchange.com/questions/47/align-vertical-columns-of-numbers-on-the-decimal-point
(defun spacemacs/align-repeat-decimal (start end)
  "Align a table of numbers on decimal points and dollar signs (both optional)"
  (interactive "r")
  (require 'align)
  (align-region start end nil
                '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                       (repeat . t)
                       (group 1 2)
                       (spacing 1 1)
                       (justify nil t)))
                nil))

(defmacro spacemacs|create-align-repeat-x (name regexp &optional justify-right default-after)
  (let ((new-func (intern (concat "spacemacs/align-repeat-" name))))
    `(defun ,new-func (start end switch)
       (interactive "r\nP")
       (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
         (spacemacs/align-repeat start end ,regexp ,justify-right after)))))

(spacemacs|create-align-repeat-x "comma" "," nil t)
(spacemacs|create-align-repeat-x "semicolon" ";" nil t)
(spacemacs|create-align-repeat-x "colon" ":" nil t)
(spacemacs|create-align-repeat-x "equal" "=")
(spacemacs|create-align-repeat-x "math-oper" "[+\\-*/]")
(spacemacs|create-align-repeat-x "ampersand" "&")
(spacemacs|create-align-repeat-x "bar" "|")
(spacemacs|create-align-repeat-x "left-paren" "(")
(spacemacs|create-align-repeat-x "right-paren" ")" t)
(spacemacs|create-align-repeat-x "backslash" "\\\\")

;; END align functions
#+END_SRC

** org
*** horrendous org heading manipulation commands
#+BEGIN_SRC emacs-lisp
  (defun ninrod/org-eol-m-ret ()
    "Moves point to the end of the line and applies m-ret and enters insert state."
    (interactive)
    (goto-char (point-at-eol))
    (org-meta-return)
    (evil-insert-state))

  (defun ninrod/org-bol-m-ret ()
    "Same as ninrod/org-eol-m-ret, but now at beggining of the line.
    This two could be a single parameterized function if I weren't such a piece of shit elisp programmer."
    (interactive)
    (goto-char (point-at-bol))
    (org-meta-return)
    (evil-insert-state))

  (defun ninrod/org-insert-subheading ()
    "evil style org-insert-subheading"
    (interactive)
    (goto-char (point-at-eol))
    (org-insert-subheading nil)
    (evil-insert-state))

  (defun ninrod/org-insert-heading-respect-content ()
    "evil style org-insert-subheading"
    (interactive)
    (goto-char (point-at-eol))
    (org-insert-heading-respect-content)
    (evil-insert-state))
#+END_SRC
*** ninrod/org-mv-down
- credits go to [[https://www.reddit.com/r/emacs/comments/583n1x/movecopy_a_cel_to_the_right/][/u/gmfawcett]]
#+BEGIN_SRC emacs-lisp
(defun ninrod/org-mv-down ()           ; moves a value down
  (interactive)
  (let ((pos (point))               ; get current pos
        (f (org-table-get-field)))  ; copy current field
    (org-table-blank-field)         ; blank current field
    (org-table-next-row)            ; move cursor down
    (org-table-blank-field)         ; blank that field too
    (insert f)                      ; insert the value from above
    (org-table-align)               ; realign the table
    (goto-char pos)))               ; move back to original position
#+END_SRC

*** ninrod/org-swap-down
- credits go to [[https://www.reddit.com/r/emacs/comments/583n1x/movecopy_a_cel_to_the_right/][/u/gmfawcett]]
#+BEGIN_SRC emacs-lisp
(defun ninrod/org-swap-down ()               ; swap with value below
  (interactive)
  (let ((pos (point))                   ; get current pos
        (v1 (org-table-get-field)))     ; copy current field
    (org-table-blank-field)             ; blank current field
    (org-table-next-row)                ; move cursor down
    (let ((v2 (org-table-get-field)))   ; take copy of that field, too
      (org-table-blank-field)           ; blank that field too
      (insert v1)                       ; insert the value from above
      (goto-char pos)                   ; go to original location
      (insert v2)                       ; insert the value from below
      (org-table-align)                 ; realign the table
      (goto-char pos))))                ; move back to original position
#+END_SRC
*** ninrod/org-retrieve-url-from-point
- stolen from [[http://emacs.stackexchange.com/a/3990/12585][here]] and modified.
#+BEGIN_SRC emacs-lisp
  (defun ninrod--grab-link (text)
    (string-match org-bracket-link-regexp text)
    (substring text (match-beginning 1) (match-end 1)))
  (defun ninrod/org-retrieve-url-from-point ()
    (interactive)
    (let* ((link-info (assoc :link (org-context)))
           (text (when link-info
                   ;; org-context seems to return nil if the current element
                   ;; starts at buffer-start or ends at buffer-end
                   (buffer-substring-no-properties (or (cadr link-info) (point-min))
                                                   (or (caddr link-info) (point-max)))))
           (extracted-text (ninrod--grab-link text)))
      (when extracted-text
        (message "Extracted and yanked org-link: %s" extracted-text)
        (kill-new extracted-text))))
#+END_SRC

** lisp-mode
*** ninrod/eval-print-last-sexp
#+BEGIN_SRC emacs-lisp
  (defun ninrod/eval-print-last-sexp ()
      "Move point to the end of the line and eval-prints last sexp."
      (interactive)
      (save-excursion)
      (goto-char (point-at-eol))
      (eval-print-last-sexp))
#+END_SRC

*** ninrod/eval-last-sexp
#+BEGIN_SRC emacs-lisp
  (defun ninrod/eval-last-sexp ()
      "Move point to the end of the line and eval last sexp."
      (interactive)
      (save-excursion)
      (goto-char (point-at-eol))
      (eval-last-sexp nil))
#+END_SRC

** uargs
*** ninrod/uarg-shell-command
#+BEGIN_SRC emacs-lisp
  (defun ninrod/uarg-exec-shell-command ()
    (interactive)
    (execute-extended-command '(4) "shell-command"))
#+END_SRC
*** ninrod/uarg-magit-status
#+BEGIN_SRC emacs-lisp
  (defun ninrod/uarg-magit-status ()
    (interactive)
    (magit-status (magit-read-repository
                   (>= (prefix-numeric-value current-prefix-arg) 16))))
#+END_SRC
*** ninrod/extended-buffer-menu
- more info here: http://emacs.stackexchange.com/a/21635/12585
#+BEGIN_SRC emacs-lisp
  (defun ninrod/extended-buffer-menu ()
    (interactive)
    ;; M-x list-buffers???
    (execute-extended-command '(4) "buffer-menu"))
#+END_SRC

** clipboard
*** ninrod/neotree-copy-filepath-to-clipboard
- with help from [[http://stackoverflow.com/a/40564951/4921402][/u/lawlist]]
#+BEGIN_SRC emacs-lisp
  (defun ninrod/neotree-copy-path ()
    (interactive)
    (message (concat "copied path: \"" (neotree-copy-filepath-to-yank-ring) "\" to the clipboard.")))
#+END_SRC

** better windows splits
#+BEGIN_SRC emacs-lisp
(defun ninrod/split-window-below-and-focus ()
  "Split the window vertically and focus the new window."
  (interactive)
  (split-window-below)
  (windmove-down))

(defun ninrod/split-window-right-and-focus ()
  "Split the window horizontally and focus the new window."
  (interactive)
  (split-window-right)
  (windmove-right))
#+END_SRC

** buffers
*** ninrod/add-filename-to-kill-ring
#+BEGIN_SRC emacs-lisp
  (defun ninrod/add-filename-to-kill-ring ()
    "Add current buffer filename to the kill-ring."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (kill-new filename)
        (message "Added buffer filename '%s' to the kill-ring." filename))))
#+END_SRC

*** ninrod/revert-buffer with no confirmation
- from [[http://www.emacswiki.org/emacs-en/download/misc-cmds.el][emacswiki]]
#+BEGIN_SRC emacs-lisp
(defun ninrod/revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+END_SRC

** misc
*** ninrod/origami-toggle-node
- with help from [[https://www.reddit.com/r/emacs/comments/580v30/tweaking_origamiel_lisp_and_regexes/][reddit]]
#+BEGIN_SRC emacs-lisp
  (defun ninrod/origami-toggle-node ()
    (interactive)
    (save-excursion
      (goto-char (point-at-eol))
      (origami-toggle-node (current-buffer) (point))))
#+END_SRC
*** ninrod/display-ansi-colors
- credits: [[http://stackoverflow.com/a/23382008/4921402][this]] SO question
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun ninrod/display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+END_SRC
*** ninrod/echo
#+BEGIN_SRC emacs-lisp
(defun ninrod/echo ()
  "just a simple test message for use within bind setups"
  (interactive)
  (message "The new bind *WORKED*! Yes!!11!"))
#+END_SRC

* evil
** bootstrap
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :load-path "lisp/ninrod/evil"
    :config
    (setcdr evil-insert-state-map nil) ;; emacsify insert state: http://stackoverflow.com/a/26573722/4921402
    (define-key evil-insert-state-map [escape] 'evil-normal-state);; but [escape] should switch back to normal state, obviously.
    (fset 'evil-visual-update-x-selection 'ignore);; Amazing hack lifted from: http://emacs.stackexchange.com/a/15054/12585

    (evil-mode)

    (evil-define-text-object ninrod/textobj-entire (count &optional beg end type)
      (evil-range (point-min) (point-max)))
    (define-key evil-outer-text-objects-map "e" 'ninrod/textobj-entire));; simulation of kana's textobj-entire
#+END_SRC
** babysited packages
*** evil-targets
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (use-package targets
      :load-path "lisp/ninrod/targets.el"
      :init
      (setq targets-user-text-objects '((pipe "|" nil separator)
                                        (paren "(" ")" pair :more-keys "b")
                                        (bracket "[" "]" pair :more-keys "r")
                                        (curly "{" "}" pair :more-keys "c")))
      :config
      (targets-setup t
                     :inside-key nil
                     :around-key nil
                     :remote-key nil)))
#+END_SRC
*** evil-rect-ext
#+BEGIN_SRC emacs-lisp
  (use-package rect-ext
    :load-path "lisp/noctuid/rect-ext.el")
#+END_SRC
*** evil-mc
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc
    :ensure t
    :diminish ""
    :config
    (global-evil-mc-mode  1)

    ;; stolen from @noctuid's comment on: https://github.com/gabesoft/evil-mc/issues/22#issuecomment-267682745
    (defun evil--mc-make-cursor-at-col (startcol _endcol orig-line)
      (move-to-column startcol)
      (unless (= (line-number-at-pos) orig-line)
        (evil-mc-make-cursor-here)))
    (defun evil-mc-make-vertical-cursors (beg end)
      (interactive (list (region-beginning) (region-end)))
      (evil-mc-pause-cursors)
      (apply-on-rectangle #'evil--mc-make-cursor-at-col
                          beg end (line-number-at-pos (point)))
      (evil-mc-resume-cursors)
      (evil-normal-state)
      (move-to-column (evil-mc-column-number (if (> end beg)
                                                 beg
                                               end)))))
#+END_SRC
*** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :load-path "lisp/timcharper/evil-surround"
    :init
    (with-eval-after-load 'evil-surround
      (evil-add-to-alist
       'evil-surround-pairs-alist ;; use non-spaced pairs when surrounding with an opening brace evil-surround/issues/86
       ?\( '("(" . ")")
       ?\[ '("[" . "]")
       ?\{ '("{" . "}")
       ?\) '("( " . " )")
       ?\] '("[ " . " ]")
       ?\} '("{ " . " }")))
    :config (global-evil-surround-mode 1))
#+END_SRC
** melpa packages
*** evil-replace-with-register
#+BEGIN_SRC emacs-lisp
  (use-package evil-replace-with-register :ensure t
    :init
    (setq evil-replace-with-register-key (kbd "gp"))
    :config
    (evil-replace-with-register-install))
#+END_SRC

*** evil-commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary :ensure t
  :diminish evil-commentary-mode
  :config (evil-commentary-mode))
#+END_SRC

*** evil-matchit
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit :ensure t
  :config (global-evil-matchit-mode 1))
#+END_SRC

*** evil-exchange
#+BEGIN_SRC emacs-lisp
(use-package evil-exchange :ensure t
  :config (evil-exchange-install))
#+END_SRC

*** evil-visualstar
#+begin_src emacs-lisp
(use-package evil-visualstar :ensure t
  :config (global-evil-visualstar-mode))
#+end_src

*** evil-embrace
#+BEGIN_SRC emacs-lisp
  (use-package evil-embrace
    :ensure t
    :config
    (add-hook 'org-mode-hook 'embrace-org-mode-hook)
    (evil-embrace-enable-evil-surround-integration))
#+END_SRC
*** evil-escape
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape :ensure t
    :config
    (evil-escape-mode))
#+END_SRC

*** evil-anzu
- config section hack: see [[https://github.com/TheBB/spaceline/issues/69][TheBB/spaceline#69]]
#+BEGIN_SRC emacs-lisp
  (use-package evil-anzu :ensure t
    :config
    (setq anzu-cons-mode-line-p nil))
#+END_SRC

*** evil-god-state

#+BEGIN_SRC emacs-lisp
    (use-package evil-god-state :ensure t
      :config
      (setq evil-emacs-state-cursor 'box)
      (setq evil-god-state-cursor 'bar)
      (evil-define-key 'god global-map [escape] 'evil-god-state-bail)
      (evil-define-key 'emacs global-map [escape] 'evil-execute-in-god-state))
#+END_SRC

*** evil-args
#+begin_src emacs-lisp
(use-package evil-args :ensure t
  :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg))
#+end_src

*** evil-numbers
#+BEGIN_SRC emacs-lisp
(use-package evil-numbers :ensure t)
#+END_SRC

*** evil-indent-plus
#+begin_src emacs-lisp
(use-package evil-indent-plus :ensure t
  :config (evil-indent-plus-default-bindings))
#+end_src

* tweaks
** daemon configuration
- more info [[http://www.tychoish.com/posts/running-multiple-emacs-daemons-on-a-single-system/][here]]
#+BEGIN_SRC emacs-lisp
  ;; (setq server-use-tcp t)
#+END_SRC

** misc options
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq recentf-max-menu-items 200                  ;MRU configs
        recentf-max-saved-items 200
        default-directory "~/code/sources/dotfiles"
        inhibit-startup-message t
        display-time-default-load-average nil
        display-time-day-and-date t
        save-interprogram-paste-before-kill t       ;Save whatever’s in the clipboard before replacing it with the Emacs’ text.
        yank-pop-change-selection t                 ;https://github.com/dakrone/eos/blob/master/eos.org
        confirm-kill-emacs 'y-or-n-p                ;ask before killing emacs
        echo-keystrokes 0.02)                       ;instantly display current keystrokes in mini buffer

  (display-time-mode) ;hack: customize display time in modeline.
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1)) ;for emacs compiled with `nox'
  (save-place-mode 1) ;save last cursor position
  (savehist-mode 1) ;save minibuffer history
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (electric-pair-mode 1)
  (column-number-mode t)
  ;; (global-subword-mode) ;support for camelcase words
#+END_SRC
** better defaults
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward
        apropos-do-all t
        mode-require-final-newline nil
        require-final-newline nil)
#+END_SRC
** backups
- partially lifted from [[https://github.com/magnars/.emacs.d/blob/master/init.el][magnar's emacs.d]]
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
(setq vc-make-backup-files t) ;Make backups of files, even when they're in version control
(setq auto-save-default nil)  ;stop creating those #auto-save# files
(global-auto-revert-mode)
#+END_SRC

** font
- Monoid: [[https://github.com/larsenwork/monoid][larsenwork/monoid]]
  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      ;; (add-to-list 'default-frame-alist '(font . "Monaco-14"))
      (add-to-list 'default-frame-alist '(font . "Monoisome-14")))

    (when (eq system-type 'gnu/linux)
      ;; (add-to-list 'default-frame-alist '(font . "Monaco-14"))
      ;; (add-to-list 'default-frame-alist '(font . "FiraCode-14"))
      (add-to-list 'default-frame-alist '(font . "Monoisome-14")))
  #+END_SRC
** gui
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (when (eq system-type 'darwin)
        ;; start maximized
        ;; (toggle-frame-maximized)
        ;; (set-frame-parameter nil 'fullscreen 'fullboth)

        ;; osx does not lose screen real state with menu bar mode on
        (menu-bar-mode 1)))
#+END_SRC

** indentation
#+BEGIN_SRC emacs-lisp
  (setq-default js-basic-offset 2
                js-indent-level 2
                sh-basic-offset 2
                sh-indentation 2
                indent-tabs-mode nil)
#+END_SRC

** gnutls tuning
#+BEGIN_SRC emacs-lisp
(setq gnutls-min-prime-bits 4096)
#+END_SRC

** move custom data out of init.el
- more info [[http://irreal.org/blog/?p=3765][here]]
- and [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][here (M-x all-things-emacs)]]
  #+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-customizations.el")
(load custom-file 'noerror)
  #+END_SRC

** org-mode
*** general configs
- somewhat lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))
  (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
  (setq org-log-done (quote time))
  (setq org-log-redeadline (quote time))
  (setq org-log-reschedule (quote time))
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** org capture
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("a" "My TODO task format." entry
         (file "~/code/sources/life/gtd/inbox.org")
         "* TODO %? ")))
(defun air-org-task-capture ()
  "Capture a task with my default template."
  (interactive)
  (org-capture nil "a"))
#+END_SRC

*** org agenda
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/code/sources/life/"))

  (defun air-pop-to-org-agenda (split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda-list)
    (when (not split)
      (delete-other-windows)))

  (setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC

*** org refile
- with help from [[http://stackoverflow.com/a/22200624/4921402][so]]
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        '("~/code/sources/life/gtd/archives/done.org"
          "~/code/sources/life/gtd/archives/canceled.org"
          "~/code/sources/life/gtd/projects/oficina.org"
          "~/code/sources/life/gtd/inbox.org"
          "~/code/sources/life/gtd/next.org"
          "~/code/sources/life/gtd/maybe.org"))

  (setq org-refile-targets
        '((nil :maxlevel . 1)
          (org-agenda-files :maxlevel . 1)))
#+END_SRC

** show trailing whitespaces
#+BEGIN_SRC emacs-lisp
(require 'whitespace) 
(setq-default show-trailing-whitespace t)
(defun no-trailing-whitespace () (setq show-trailing-whitespace nil))
(add-hook 'minibuffer-setup-hook 'no-trailing-whitespace)
(add-hook 'ielm-mode-hook 'no-trailing-whitespace)
(add-hook 'gdb-mode-hook 'no-trailing-whitespace)
(add-hook 'help-mode-hook 'no-trailing-whitespace)
(add-hook 'term-mode-hook 'no-trailing-whitespace)
(add-hook 'eshell-load-hook 'no-trailing-whitespace)
(add-hook 'Buffer-menu-mode-hook 'no-trailing-whitespace)
(add-hook 'Info-mode-hook 'no-trailing-whitespace)
#+END_SRC

* packages
** cosmetic
*** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t)
#+END_SRC

*** themes
**** spacemacs-theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-dark-theme :load-path "lisp/ninrod/spacemacs-theme"
    :init
    (setq spacemacs-theme-org-height nil)
    (setq spacemacs-theme-comment-bg nil)
    :config
    (load-theme 'spacemacs-dark t))
#+END_SRC

**** zerodark-theme
#+BEGIN_SRC text
  (use-package zerodark-theme :load-path "lisp/ninrod/zerodark-theme"
    :init
    (setq zerodark-use-paddings-in-mode-line nil)
    (setq anzu-cons-mode-line-p t)

    ;; (use-package modeline-posn :ensure t
    ;;   :config
    ;;   (size-indication-mode))

    :config
    (load-theme 'zerodark t))
#+END_SRC

**** gruvbox-theme
#+BEGIN_SRC text
    (use-package gruvbox-theme :load-path "lisp/ninrod/gruvbox-theme"
      :init
      (setq gruvbox-contrast 'hard)
      :config
      (load-theme 'gruvbox t))
#+END_SRC

**** darktooth-theme
#+BEGIN_SRC text
  (use-package darktooth-theme
    :init

    (load-theme 'darktooth t)
    (setq anzu-cons-mode-line-p t)
    (darktooth-modeline)
    (with-eval-after-load "git-gutter"
      (set-face-attribute 'git-gutter:added    nil :foreground "#5A790E")
      (set-face-attribute 'git-gutter:deleted  nil :foreground "#9D0006")
      (set-face-attribute 'git-gutter:modified nil :foreground "#8F3F71"))

    :defer t
    :ensure t)
#+END_SRC

*** spaceline
- to see an exhaustive separator list see [[https://github.com/milkypostman/powerline/blob/master/powerline-separators.el#L9-L11][here]].
#+BEGIN_SRC emacs-lisp
  (use-package spaceline :ensure t
    :config
    (setq powerline-height 30)
    (setq powerline-default-separator 'utf-8)
    (setq spaceline-separator-dir-left '(right . right))
    (setq spaceline-separator-dir-right '(right . right))

    (when (eq system-type 'darwin)
      ;; (setq ns-use-srgb-colorspace nil)
      (setq powerline-default-separator 'alternate) ;customize separators for Powerline: alternate, slant, wave, zigzag, nil.
      )

    (when (eq system-type 'gnu/linux)
      (setq powerline-default-separator 'slant) ;customize separators for Powerline: alternate, slant, wave, zigzag, nil.
      )

    (setq spaceline-workspace-numbers-unicode t) ;for eyebrowse. nice looking unicode numbers for tagging different layouts
    (setq spaceline-window-numbers-unicode t)
    (setq spaceline-highlight-face-func #'spaceline-highlight-face-evil-state) ; set colouring for different evil-states
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)
    (spaceline-compile))
#+END_SRC
*** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters :ensure t
  :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
*** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+END_SRC
*** highlight-numbers
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC

*** highlight-parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses :ensure t
    :diminish highlight-parentheses-mode
    :config
        (add-hook 'prog-mode-hook #'highlight-parentheses-mode)
        (add-hook 'org-mode-hook #'highlight-parentheses-mode)
        (setq hl-paren-delay 0.2)
        (set-face-attribute 'hl-paren-face nil :weight 'ultra-bold))
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens :ensure t
    :init
    (setq sp-show-pair-delay 0.1
          sp-show-pair-from-inside t)
    :config
    (show-smartparens-global-mode +1))
#+END_SRC
*** kurecolor
#+BEGIN_SRC emacs-lisp
  (use-package kurecolor
    :ensure t)
#+END_SRC
** expand functionality
*** restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs :ensure t)
#+END_SRC

*** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse :ensure t
  :config
    (setq eyebrowse-wrap-around t)
    (eyebrowse-mode t))
#+END_SRC

*** multi-term
#+BEGIN_SRC emacs-lisp
(use-package multi-term :ensure t
  :config (setq multi-term-program "/bin/zsh"))
#+END_SRC

*** ag: the silver searcher
#+BEGIN_SRC emacs-lisp
(use-package ag :ensure t)
#+END_SRC

*** origami
#+BEGIN_SRC emacs-lisp
(use-package origami :ensure t
  :config
    (add-hook 'prog-mode-hook
      (lambda ()
        (setq-local origami-fold-style 'triple-braces)
        (origami-mode)
        (origami-close-all-nodes (current-buffer)))))
#+END_SRC

*** restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient :ensure t)
#+END_SRC

*** atomic-chrome
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (use-package atomic-chrome :ensure t
      :init
      (atomic-chrome-start-server)))
#+END_SRC

*** vidff
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (use-package vdiff :ensure t
      :config
      (evil-define-key 'normal vdiff-mode-map "," vdiff-mode-prefix-map)))
#+END_SRC
*** nhxel-mode
#+BEGIN_SRC emacs-lisp
  (use-package nhexl-mode
    :ensure t
    :pin gnu)
#+END_SRC
*** editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :diminish ""
  :config
  (editorconfig-mode 1))
#+END_SRC
** completions
*** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init

    ;; see https://github.com/abo-abo/swiper/issues/644
    (setq ivy-ignore-buffers '())
    (add-to-list 'ivy-ignore-buffers "\\*magit")
    (add-to-list 'ivy-ignore-buffers "\\*Help\\*")
    (add-to-list 'ivy-ignore-buffers "\\*Buffer List\\*")
    (add-to-list 'ivy-ignore-buffers "\\*Compile-Log\\*")
    (add-to-list 'ivy-ignore-buffers "\\*Flycheck")
    (add-to-list 'ivy-ignore-buffers "\\*terminal")

    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-height 15)

    (setq ivy-extra-directories '("./"))

    :config
    ;; (setq ivy-use-virtual-buffers t)
    (ivy-mode 1)

    (use-package counsel
      :ensure t))

#+END_SRC
*** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
        :ensure t
        :init
        (setq smex-history-length 20)
        :config
        (smex-initialize))
#+END_SRC
*** company
#+BEGIN_SRC emacs-lisp
  (use-package company :ensure t
    :init

    ;; http://emacs.stackexchange.com/a/10838/12585
    (setq company-dabbrev-downcase nil)

    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-mode-map (kbd "C-SPC") 'company-complete))
#+END_SRC

*** yasnippet
#+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config (yas-global-mode 1))
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :diminish ""
      :config (global-flycheck-mode t))
#+END_SRC

*** emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :init (progn
                 (add-hook 'html-mode-hook 'emmet-mode)
                 (add-hook 'nxml-mode-hook 'emmet-mode)
                 (add-hook 'sgml-mode-hook 'emmet-mode)
                 (add-hook 'css-mode-hook  'emmet-mode)
                 (add-hook 'web-mode-hook  'emmet-mode))
    :defer t
    :ensure t)
#+END_SRC

** keybinds
*** which key
#+BEGIN_SRC emacs-lisp
    (use-package which-key :ensure t
      :diminish which-key-mode
      :config (which-key-mode))
#+END_SRC
*** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra :ensure t
    :config
    (use-package ivy-hydra :ensure t))
#+END_SRC

*** general.el
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup))
#+END_SRC
** file browsing
*** projectile
- the projectile-switch-project-action hack was lifted from [[projectile-switch-project-action][here]].
#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure t
    :diminish projectile-mode
    :init
    ;; (add-hook 'after-init-hook 'projectile-mode)
    (use-package counsel-projectile :ensure t)

    ;; use ivy
    (setq projectile-completion-system 'ivy)

    ;; make projectile usable for every directory
    (setq projectile-require-project-root nil)

    ;; cd into dir i want, including git-root
    ;; (defun cd-dwim ()
    ;;     (cd (projectile-project-root)))
    ;; (setq projectile-switch-project-action 'cd-dwim)

    :config
    (projectile-global-mode))
#+END_SRC

*** dired+
#+BEGIN_SRC emacs-lisp
  (use-package dired+ :ensure t
    :init
    (setq
     diredp-hide-details-initially-flag nil
     dired-omit-files "^\\.?#\\|^\\.[^.].*"))
#+END_SRC

*** dired-k
#+BEGIN_SRC emacs-lisp
  (use-package dired-k :ensure t
    :init
      (setq dired-k-human-readable t)
      (setq dired-k-style 'git)
    :config
    (add-hook 'dired-initial-position-hook 'dired-k))

#+END_SRC
*** dired-sort
#+BEGIN_SRC emacs-lisp
(use-package dired-sort :ensure t)
#+END_SRC
*** dired-detais
#+BEGIN_SRC emacs-lisp
(use-package dired-details :ensure t)
#+END_SRC
*** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree :ensure t
    :init
    (setq neo-create-file-auto-open t
          neo-auto-indent-point nil
          neo-mode-line-type 'none
          neo-window-fixed-size nil ; or neo-window-width 50
          neo-show-updir-line nil
          neo-smart-open t
          neo-show-hidden-files t
          neo-theme (if (display-graphic-p) 'icons 'nerd) ; fallback
          ;; neo-theme 'nerd ; fallback
          neo-banner-message nil))
#+END_SRC

** git
*** git-gutter-fringe
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (message "using git-gutter-fringe")
    (use-package git-gutter-fringe
      :init
      (global-git-gutter-mode t)
      :defer t
      :ensure t))
#+END_SRC

*** magit
- for more info about magit-display-buffer-function, see [[http://stackoverflow.com/q/39933868/4921402][here]].
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t
    :config
      ;;(setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
      (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
      (setq magit-repository-directories '("~/code/sources"))
      (use-package evil-magit :ensure t)
      (setq magit-completing-read-function 'ivy-completing-read)
  )
#+END_SRC

** org
*** Org Bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :init

      ;; org-bullets-bullet-list
      ;; default: "◉ ○ ✸ ✿"
      ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
      ;; Small: ► • ★ ▸
      (setq org-bullets-bullet-list '("•"))

      ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
      ;; (setq org-ellipsis "⤵")
      (setq org-ellipsis "…")

      :config
      (add-hook 'org-mode-hook 
                (lambda () 
                  (org-bullets-mode 1))))
#+END_SRC

*** Reveal.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure t)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
  :ensure t)
#+END_SRC

*** ob-http
#+BEGIN_SRC emacs-lisp
(use-package ob-http :ensure t
:config
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (http . t))))
#+END_SRC

** filetypes
*** Dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode :ensure t
  :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC
*** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC
*** gitconfig
#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode :ensure t)
(use-package gitignore-mode :ensure t)
(use-package gitattributes-mode :ensure t)
#+END_SRC
** languages
*** viml
#+BEGIN_SRC emacs-lisp
(use-package vimrc-mode :ensure t)
#+END_SRC

*** md: markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
#+END_SRC


*** html: web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :init
  (setq web-mode-enable-current-element-highlight t)
  :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

      (defun my-web-mode-hook ()
        "Hooks for Web mode."

        ;; config auto closing: http://stackoverflow.com/a/23407052/4921402
        (setq web-mode-tag-auto-close-style 2)
        (setq web-mode-auto-close-style 2)
        (setq web-mode-enable-auto-closing t)

        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset    2)
        (setq web-mode-code-indent-offset   2))
      (add-hook 'web-mode-hook 'my-web-mode-hook))
#+END_SRC

*** css/less:
#+BEGIN_SRC emacs-lisp
  (use-package less-css-mode :ensure t)
#+END_SRC

*** js: js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode :ensure t
  :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC

*** json: json-mode, json-reformat
#+BEGIN_SRC emacs-lisp
  (use-package json-reformat :ensure t
    :config
    (setq json-reformat:indent-width 2))

  (use-package json-mode :ensure t)
#+END_SRC

** mirrors
*** elpa-mirror
#+BEGIN_SRC emacs-lisp
(use-package elpa-mirror :ensure t
:init (setq elpamr-default-output-directory "~/.emacs.d/thin-elpa-mirror"))
#+END_SRC

*** elpa-clone
#+BEGIN_SRC emacs-lisp
(use-package elpa-clone :ensure t)
#+END_SRC
** info
*** info+
#+BEGIN_SRC emacs-lisp
(use-package info+ :ensure t)
#+END_SRC
*** sicp
#+BEGIN_SRC emacs-lisp
(use-package sicp :ensure t)
#+END_SRC
** toys
*** speed-type
#+BEGIN_SRC emacs-lisp
  (use-package speed-type :load-path "lisp/parkouss/speed-type")
#+END_SRC
*** keyfreq
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :init

    (setq keyfreq-file "~/.emacs.d/keyfreq.el")
    (setq keyfreq-file-lock "~/.emacs.d/keyfreq.lock")

    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
* fixes
** yasnippet hijacks TAB key in term mode
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook 'my-term-mode-hook)
(defun my-term-mode-hook ()
  (yas-minor-mode -1))
#+END_SRC

** fix $PATH on macosx with exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize)))
#+END_SRC

** diminishes
#+BEGIN_SRC emacs-lisp
  (diminish 'flycheck-mode)
  (diminish 'company-mode)
  (diminish 'ivy-mode)
  (diminish 'undo-tree-mode)
  (diminish 'auto-revert-mode)
  (diminish 'org-indent-mode)
  (diminish 'smartparens-mode)
  (diminish 'git-gutter-mode)
  (diminish 'evil-escape-mode)
  (diminish 'subword-mode)
  (diminish 'smart-tab-mode)
  (diminish 'flyspell-mode "FlyS")
#+END_SRC

** M-x man
- [[http://emacs.stackexchange.com/a/10669/12585][list]] of evil states:
- with [[https://github.com/syl20bnr/spacemacs/issues/7346][help]] from @TheBB
- gnu/linux completion hack stolen from [[https://www.emacswiki.org/emacs/ManMode#toc2][EmacsWiki]]
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "man"
    (evil-set-initial-state 'Man-mode 'normal)
    (setq Man-notify-method 'pushy)

    (when (eq system-type 'gnu/linux)
      (defadvice man (before my-woman-prompt activate)
        (interactive (progn
                       (require 'woman)
                       (list (woman-file-name nil)))))))
#+END_SRC

** dabbrev-expand case fix
#+BEGIN_SRC emacs-lisp
  ;; (setq dabbrev-case-fold-search nil)
#+END_SRC
* keybinds
** SPC-map
*** core
#+BEGIN_SRC emacs-lisp
  (general-create-definer spc-map
   :states '(normal visual motion)
   :prefix "SPC")

  (spc-map
   "TAB" 'evil-emacs-state
   "SPC" 'counsel-M-x
   "RET" 'write-file)
#+END_SRC
*** (a) align
#+BEGIN_SRC emacs-lisp
  (spc-map "a" '(:ignore t :which-key "align")
    "aa" 'align-regexp
    "ac" 'align-current
    "am" 'spacemacs/align-repeat-math-oper
    "ar" 'spacemacs/align-repeat
    "a&" 'spacemacs/align-repeat-ampersand
    "a(" 'spacemacs/align-repeat-left-paren
    "a)" 'spacemacs/align-repeat-right-paren
    "a," 'spacemacs/align-repeat-comma
    "a." 'spacemacs/align-repeat-decimal
    "a:" 'spacemacs/align-repeat-colon
    "a;" 'spacemacs/align-repeat-semicolon
    "a=" 'spacemacs/align-repeat-equal
    "a\\" 'spacemacs/align-repeat-backslash
    "a|" 'spacemacs/align-repeat-bar
  )
#+END_SRC
#+END_SRC
*** (d) emacs help
#+BEGIN_SRC emacs-lisp
  (spc-map "d" '(:ignore t :which-key "describe/help")
    "da" 'apropos
    "db" 'counsel-descbinds
    "dc" 'describe-char
    "df" 'counsel-describe-function
    "di" 'info
    "dk" 'describe-key
    "dm" 'describe-mode
    "dt" 'counsel-describe-face
    "dv" 'counsel-describe-variable
    )
#+END_SRC
*** (e) edit
#+BEGIN_SRC emacs-lisp
  (spc-map "e" '(:ignore t :which-key "edit")
    "er" 'replace-string
    "es" 'sort-lines
    )
#+END_SRC
*** (f) file/dir
#+BEGIN_SRC emacs-lisp
  (spc-map "f" '(:ignore t :which-key "file/dir ops")
    "fc" 'make-directory
    "fd" 'cd
    "fy" 'ninrod/add-filename-to-kill-ring
    )
#+END_SRC
*** (i) ivy
#+BEGIN_SRC emacs-lisp
  (spc-map "i" '(:ignore t :which-key "ivy")
    "ia" 'counsel-ag
    "ib" 'counsel-descbinds
    "if" 'counsel-describe-function
    "il" 'ivy-pop-view  ; load
    "is" 'ivy-push-view ; save
    "it" 'counsel-describe-face
    "iv" 'counsel-describe-variable
  )
#+END_SRC
*** (g) ma[g]it
#+BEGIN_SRC emacs-lisp
  (spc-map "g" '(:ignore t :which-key "ma[g]it")
    "gi" 'magit-init
    "gf" 'magit-find-file
    "gh" 'magit-log-buffer-file
    "gc" 'magit-clone
    "gl" 'magit-log-buffer-file; commits in master touching current buffer
    "gs" 'ninrod/uarg-magit-status
    )
#+END_SRC
*** (h) hydras
**** (z) zoom
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom ()
    "zoom"
    ("i" text-scale-increase "in")
    ("o" text-scale-decrease "out"))

  (spc-map "h" '(:ignore t :which-key "hydras")
   "hz" 'hydra-zoom/body
   )
#+END_SRC

*** (m) M-x functions
#+BEGIN_SRC emacs-lisp
  (spc-map "m" '(:ignore t :which-key "M-x functions")
           "ma" 'projectile-ag
           "mc" 'count-words
           "me" 'ninrod/uarg-exec-shell-command
           "mf" 'customize-apropos-faces
           "mi" 'ielm
           "mm" 'man
           "mt" 'elpamr-create-mirror-for-installed; mnemonic: create [t]hin mirror
           "mu" 'undo-tree-visualize
           "m$" 'eshell
           )
#+END_SRC
*** (o) org-mode
#+BEGIN_SRC emacs-lisp
  (spc-map "o" '(:ignore t :which-key "org-mode")
    "oc" 'air-org-task-capture
    "oa" 'air-pop-to-org-agenda
    "ot" 'org-table-convert-region
    "ob" 'org-bullets-mode
  )
#+END_SRC

*** (s) spelling
#+BEGIN_SRC emacs-lisp
  (spc-map "s" '(:ignore t :which-key "spelling")
           "sw" '(ispell-word :which-key "ispell: check word")
           "se" '((lambda () (interactive) (ispell-change-dictionary "english")) :which-key "ispell: use english dictionary")
           "sp" '((lambda () (interactive) (ispell-change-dictionary "pt_BR")) :which-key "ispell: use pt_BR dictionary")
           "sk" '((lambda () (interactive) (flyspell-mode -1)) :which-key "turn off flyspell mode")
           "ss" '((lambda () (interactive) (flyspell-mode 1)) :which-key "turn on flyspell mode")
           )
#+END_SRC

*** (t): Toggles
#+BEGIN_SRC emacs-lisp
  (spc-map "t" '(:ignore t :which-key "toggles")
           "tr" 'rainbow-mode
           "tt" 'toggle-truncate-lines
           "tc" 'ninrod/display-ansi-colors
           )
#+END_SRC

** s-map
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps '(normal visual motion)
   :prefix "s"
   "" nil

   "/" 'swiper


   ;; "TAB" 'reserved
   "DEL" 'neotree-toggle
   "RET" 'evil-save-modified-and-close; save and close
   "<SPC>" 'counsel-bookmark; jump to bookmark
   "-" 'bookmark-delete
   "=" 'bookmark-set
   ;; buffer operations
   "n" 'rect-ext-narrow
   "w" 'rect-ext-widen
   "q" 'evil-record-macro
   "u" 'ninrod/revert-buffer-no-confirm
   "d" 'kill-this-buffer
   "m" 'ninrod/extended-buffer-menu
   "o" 'air-org-task-capture
   "i" 'ivy-switch-buffer
   "t" 'multi-term

                                          ; edit operations
   "p" 'counsel-yank-pop
   "r" 'anzu-query-replace-regexp

                                          ; directory operations
   "s" 'counsel-projectile-switch-project
                                          ; window operations
   "j" 'evil-window-down
   "k" 'evil-window-up
   "h" 'evil-window-left
   "l" 'evil-window-right
   "y" 'ninrod/split-window-right-and-focus
   "x" 'ninrod/split-window-below-and-focus
   )
#+END_SRC

** evil
*** abusing the g prefix
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'motion
   :prefix "g"

   "o" 'evil-goto-first-line
   "l" 'evil-goto-line
   "9" (kbd "Hz-M")
   "0" (kbd "LztM")

   ;; "1" 'reserved
   ;; "2" 'reserved
   ;; "3" 'reserved
   ;; "4" 'reserved

   ;; "RET" 'reserved

   "s" 'magit-status
   "." 'counsel-projectile
   "/" 'swiper
   "h" 'counsel-recentf

   "i" 'goto-last-change
   ";" 'evil-last-non-blank

   "+" 'evil-numbers/inc-at-pt
   "-" 'evil-numbers/dec-at-pt

  ;; As I've sequestered < and > when in org mode, we need a workaround.
  ">" 'evil-shift-right
  "<" 'evil-shift-left
   )

#+END_SRC

*** comfort improvements
#+BEGIN_SRC emacs-lisp
  (general-nmap
   "RET" 'evil-write
   "TAB" 'evil-toggle-fold
   "DEL" 'counsel-find-file
   "q"   'evil-quit
   "-"   'evil-ex-nohighlight
   "Q"   'evil-record-macro
   "G"   'evil-execute-in-god-state)
  (general-mmap
   "(" 'evil-backward-paragraph
   ")" 'evil-forward-paragraph)
#+END_SRC

*** function keys
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "<f1>" 'eyebrowse-switch-to-window-config-1
   "<f2>" 'eyebrowse-switch-to-window-config-2
   "<f3>" 'eyebrowse-switch-to-window-config-3
   "<f4>" 'eyebrowse-switch-to-window-config-4
   "<f5>" 'eyebrowse-rename-window-config

   "<f6>" nil
   "<f7>" nil
   "<f8>" nil
   "<f9>" nil
   "<f10>" nil
   "<f11>" nil

   "<f12>" 'restart-emacs
   )
#+END_SRC

*** fixes
#+BEGIN_SRC emacs-lisp
  (general-define-key :keymaps '(normal visual) "z." 'evil-scroll-line-to-center) ;; `z.' fix
  (general-define-key :keymaps '(normal visual) "z-" 'evil-scroll-line-to-bottom) ;; `z-' fix

  ;; make / and ? behave like vim
  (general-define-key :keymaps 'isearch-mode-map "<escape>" 'isearch-cancel)
  (general-define-key :keymaps 'evil-ex-search-keymap "<escape>" 'minibuffer-keyboard-quit)

  ;; auto-indent on RET
  (general-define-key "RET" 'newline-and-indent)
#+END_SRC

*** insert state
#+BEGIN_SRC emacs-lisp
  (general-define-key "C-<tab>" 'dabbrev-expand)
  (general-define-key :keymaps 'minibuffer-local-map "C-<tab>" 'dabbrev-expand)
#+END_SRC
*** evil-mc
#+BEGIN_SRC emacs-lisp
  (general-define-key :keymaps 'evil-mc-key-map :states 'visual "C-n" 'evil-mc-make-vertical-cursors)
#+END_SRC
** org
*** , local
**** definer
#+BEGIN_SRC emacs-lisp
(general-create-definer org-comma-map
   :keymaps 'org-mode-map
   :states '(normal visual)
   :prefix ",")
#+END_SRC
**** fast
#+BEGIN_SRC emacs-lisp
  (org-comma-map
   "" 'nil

   "s" 'org-sort
   "r" 'org-refile
   "w" 'widen

   "l" 'org-insert-link
   "t" 'counsel-org-tag

   "TAB" 'evil-toggle-fold

   "RET" 'org-open-at-point
   )
#+END_SRC
**** caps
***** C: clock/timer
#+BEGIN_SRC emacs-lisp
  (org-comma-map "C" '(:ignore t :which-key "clock/timer")
    "Ci" 'org-clock-in
    "Co" 'org-clock-out
    "C-" 'org-timer-item
    "Ct" 'org-timer
    "Cs" 'org-timer-stop
    )
#+END_SRC

***** E: exports
#+BEGIN_SRC emacs-lisp
  (org-comma-map "E" '(:ignore t :which-key "Exports")
  "Ed" 'org-export-dispatch)
#+END_SRC

***** T: toggles
#+BEGIN_SRC emacs-lisp
  (org-comma-map "T" '(:ignore t :which-key "Toggles")
  "Tl" 'org-toggle-link-display
)
#+END_SRC

*** t local
**** definer
#+BEGIN_SRC emacs-lisp
(general-create-definer org-t-map
   :keymaps 'org-mode-map
   :states '(normal)
   :prefix "t")
#+END_SRC

**** fast
#+BEGIN_SRC emacs-lisp
  (org-t-map
   ;; "<SPC>" 'ninrod/org-insert-subheading ; open new subheading

   "l" 'org-metaright
   "h" 'org-metaleft
   "j" 'org-metadown
   "k" 'org-metaup

   "y" 'ninrod/org-retrieve-url-from-point

   "n" 'org-narrow-to-subtree

   "t" 'org-todo

   "-" 'org-ctrl-c-minus
   "*" 'org-ctrl-c-star

   "TAB" 'ninrod/org-insert-subheading ; open new subheading

   "o" 'ninrod/org-eol-m-ret ; open new heading below, not respecting content
   "RET" 'ninrod/org-insert-heading-respect-content ; open new heading below, respecting content
   "DEL" 'ninrod/org-bol-m-ret ; open new heading above
   )
#+END_SRC

*** T local (tables)
**** definer
#+BEGIN_SRC emacs-lisp
(general-create-definer org-T-map
   :keymaps 'org-mode-map
   :states '(normal)
   :prefix "T")
#+END_SRC

**** fast
#+BEGIN_SRC emacs-lisp
  (org-T-map
    "t" 'org-table-transpose-table-at-point
    "h" 'org-backward-sentence ;; M-a tga
    "l" 'org-forward-sentence ;; M-e tge
    "d" 'org-table-delete-column

    ;; from https://www.reddit.com/r/emacs/comments/56oc9c/orgtables_is_there_a_way_to_delete_a_whole_table/
    ;; fist place point in the top left bar (`|')
    "m" 'org-mark-element

    "o" 'org-table-insert-row ; above
    "i" 'org-table-insert-column ;before

    ;; formulas
    "@" 'org-table-toggle-coordinate-overlays
    "?" 'org-table-field-info
    "=" 'org-table-eval-formula
    "e" '((lambda () (interactive) ; [E]val formulas
           (let ((current-prefix-arg 4))
             (call-interactively 'org-table-recalculate))) :which-key "eval formulas")

    "RET" 'org-table-copy-down
  )
#+END_SRC

*** S local (subtrees)
**** definer
#+BEGIN_SRC emacs-lisp
(general-create-definer org-S-map
   :keymaps 'org-mode-map
   :states '(normal)
   :prefix "S")
#+END_SRC

**** fast
#+BEGIN_SRC emacs-lisp
  (org-S-map
  ;; subtree commands
  "h" 'org-promote-subtree
  "l" 'org-demote-subtree
  "k" 'org-move-subtree-up
  "j" 'org-move-subtree-down

  "y" 'org-copy-subtree
  "d" 'org-cut-subtree
  "p" 'org-paste-subtree
  "c" 'org-clone-subtree-with-time-shift
  )
#+END_SRC

*** local fixes
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'org-mode-map
   :states 'normal
   "RET" 'evil-write
   "zu" 'outline-up-heading
   "zh" 'outline-previous-visible-heading
   "zj" 'org-forward-heading-same-level
   "zk" 'org-backward-heading-same-level
   "zl" 'outline-next-visible-heading
   "<" 'org-do-promote
   ">" 'org-do-demote
   )

  (general-define-key
   :keymaps 'org-mode-map
   :states 'visual
   "-" 'org-ctrl-c-minus)

  (general-define-key :keymaps 'org-mode-map "C-j" 'org-edit-special)
  (general-define-key :keymaps 'org-src-mode-map "C-j" 'org-edit-src-exit)
  (general-define-key :keymaps 'org-src-mode-map :states 'normal "RET" 'org-edit-src-exit)
  (general-define-key :keymaps 'org-mode-map "C-<tab>" nil)
#+END_SRC
** dired
*** unbinds
#+BEGIN_SRC emacs-lisp
  (defun ninrod/dired--unbinds ()
    (general-define-key
     :keymaps 'dired-mode-map
     "s" nil
     "-" nil
     "n" nil
     "N" nil
     "y" nil
     "M" nil
     "L" nil
     "H" nil
     "$" nil
     "0" nil
     "w" nil
     "e" nil
     "b" nil
     "W" nil
     "E" nil
     "B" nil
     "." nil
     "f" nil
     "F" nil
     "v" nil
     "V" nil))
#+END_SRC
*** binds
#+BEGIN_SRC emacs-lisp
  (defun ninrod/dired--binds ()
    "my dired rebinds"
    (general-define-key
     :keymaps 'dired-mode-map
     :states 'normal
     "h" 'evil-backward-char
     "j" 'evil-next-line
     "k" 'evil-previous-line
     "l" 'evil-forward-char

     "c" 'find-file
     "m" 'dired-create-directory ;*-m is dired-mark
     "r" 'dired-do-rename
     "p" 'dired-do-chmod
     "t" 'dired-mark

     ",s" 'dired-sort-extension
     ",t" 'dired-details-toggle

     "DEL" 'dired-up-directory
     "go" 'evil-goto-first-line
     "gl" 'evil-goto-line
     "ge" 'evil-backward-word-end

     "R" 'dired-do-redisplay
     "T" 'dired-toggle-marks))
#+END_SRC
*** setup
- lifted from this [[http://stackoverflow.com/a/10672548/4921402][SO question]]
- lifted from magnar's [[https://github.com/magnars/.emacs.d/blob/master/site-lisp/evil/evil-integration.el][magnars config]]
#+BEGIN_SRC emacs-lisp
  ;; (setq dired-listing-switches "-lhXA --group-directories-first")
  (with-eval-after-load 'dired
    (ninrod/dired--unbinds)
    (evil-make-overriding-map dired-mode-map 'normal t); use the standard Dired bindings as a base
    (ninrod/dired--binds))
#+END_SRC
** lisp
*** definers
#+BEGIN_SRC emacs-lisp
  (general-create-definer
   lisp-comma-map
   :keymaps '(lisp-mode-map lisp-interaction-mode-map)
   :states '(normal visual)
   :prefix ",")

  (general-create-definer
   lisp-t-map
   :keymaps '(lisp-mode-map lisp-interaction-mode-map)
   :states 'normal
   :prefix "t")
#+END_SRC
*** binds
#+BEGIN_SRC emacs-lisp
  (lisp-t-map
    "o" 'ninrod/eval-print-last-sexp ;mnemonic: output to current buffer
    "l" 'ninrod/eval-last-sexp
    )
  (lisp-comma-map
    "d" 'eval-defun
    "e" 'edebug-defun
    )
#+END_SRC
** info
*** definer
#+BEGIN_SRC emacs-lisp
(general-create-definer
   info-keybind-war
   :keymaps 'Info-mode-map)
#+END_SRC
*** unbinds
#+BEGIN_SRC emacs-lisp
  (info-keybind-war
   "1" nil
   "2" nil
   "3" nil
   "4" nil
   "5" nil
   "6" nil
   "7" nil
   "8" nil
   "9" nil

   "H" nil
   "L" nil
   "M" nil

   "g" nil
   "v" nil
   "V" nil
   "n" nil
   "N" nil

   "f" nil
   "F" nil
   "w" nil
   "e" nil
   "b" nil
   "W" nil
   "E" nil
   "B" nil

   "s" nil)
#+END_SRC
*** binds
#+BEGIN_SRC emacs-lisp
  (info-keybind-war
   :states 'motion
   "-" 'evil-ex-nohighlight
   "DEL" 'Info-history-back)

  (info-keybind-war
   :states 'motion
   :prefix "SPC"
   "" nil)

  (info-keybind-war
   :states 'motion
   :prefix "z"
   "<return>" 'evil-scroll-line-to-top
   "-" 'evil-scroll-line-to-bottom
   "." 'evil-scroll-line-to-center)
#+END_SRC
** magit
*** magit-status-mode-map fixes
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'magit-status-mode-map
   "SPC" nil
   "go" 'evil-goto-first-line ;; I don't know how, but this also fixes the gl bind.
   )
#+END_SRC

*** magit-hunk-section-map fixes
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'magit-hunk-section-map
   "s" nil)
#+END_SRC

*** magit-file-section-map
#+BEGIN_SRC emacs-lisp
(general-define-key
   :keymaps 'magit-file-section-map
   "s" nil)
#+END_SRC

** term
- with help from [[https://www.reddit.com/r/emacs/comments/56xmvg/properly_editing_a_shell_buffer_with_evilmode/][/r/emacs]]
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'term-mode 'emacs)

  (general-create-definer
   ninrod--term-mode
   :keymaps '(term-raw-map term-mode-map))

  (ninrod--term-mode
   :states 'emacs
   :prefix "C-c"
   "<escape>" 'term-send-esc
   "l"        'term-line-mode
   "c"        'term-char-mode
   "j"        'multi-term-next
   "k"        'multi-term-prev)

  (ninrod--term-mode
   :states '(normal visual)
   :prefix ","
   "l" 'term-line-mode
   "c" 'term-char-mode
   "n" 'multi-term-next
   "p" 'multi-term-prev)
#+END_SRC

** prog
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'prog-mode-map
   :states 'normal
   "TAB" 'ninrod/origami-toggle-node
   )
#+END_SRC

** ag
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'ag-mode-map
   "s"      nil
   "g"      nil
   "n"      nil
   "N"      nil
   "r"      'recompile
   "DEL"    'compilation-previous-error ;; TAB is already bound to compilation-next-error
   "<SPC>"  nil)
#+END_SRC

** ivy
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps '(ivy-minibuffer-map
              ivy-switch-buffer-map
              ivy-mode-map
              ivy-occur-mode-map
              ivy-occur-grep-mode-map)
   "<escape>" 'evil-escape)
#+END_SRC

** buffer-menu
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'Buffer-menu-mode-map
   "SPC" nil
   "k" nil
   "j" nil
   "l" nil
   "h" nil
   "s" nil
   "n" nil
   "N" nil
   "*" nil
   "-" 'evil-ex-nohighlight
   )
#+END_SRC

** man
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'Man-mode-map
   :states 'normal
    "RET" 'man-follow
   )
#+END_SRC

** neotree
#+BEGIN_SRC emacs-lisp
  (require 'neotree)
  (require 'evil)
  (require 'dired)

  (define-minor-mode neotree-evil
    "Use NERDTree bindings on neotree."
    :lighter " NT"
    :keymap
    (progn
      (general-create-definer
       ninrod--neotree-map
       :keymaps 'neotree-mode-map)

      (ninrod--neotree-map
       "s"      nil
       "d"      nil
       "n"      nil
       "-"      nil
       "N"      nil
       "<SPC>"  nil)

      (evil-make-overriding-map neotree-mode-map 'normal t)

      (ninrod--neotree-map
       :states  'normal
       "d" 'neotree-change-root
       "p" 'ninrod/neotree-copy-path
       "u" 'neotree-select-up-node
       "zj" 'neotree-select-next-sibling-node
       "zk" 'neotree-select-previous-sibling-node
       "q" 'neotree-toggle
       "i" 'neotree-enter-horizontal-split
       "c" 'neotree-create-node
       "y" 'neotree-copy-node
       "x" 'neotree-delete-node
       "r" 'neotree-rename-node
       "gg" 'evil-goto-first-line
       "go" 'evil-goto-first-line
       "gl" 'evil-goto-line
       "gr" 'neotree-refresh
       "DEL" 'neotree-select-up-node
       "RET" 'neotree-enter)

      neotree-mode-map))
#+END_SRC
