#+STARTUP: indent
#+STARTUP: overview

* lifted lisp functions
** spacemacs
*** spacemacs/buffer operations
**** spacemacs/alternate-buffer
SPC TAB
back and forth between current and last buffer
#+BEGIN_SRC emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))
#+END_SRC

**** spacemacs/kill-this-buffer
SPC b d
#+BEGIN_SRC emacs-lisp
(defun spacemacs/kill-this-buffer (&optional arg)
  "Kill the current buffer.
If the universal prefix argument is used then kill also the window."
  (interactive "P")
  (if (window-minibuffer-p)
      (abort-recursive-edit)
    (if (equal '(4) arg)
        (kill-buffer-and-window)
      (kill-buffer))))
#+END_SRC

**** spacemacs/kill-other-buffers
#+BEGIN_SRC emacs-lisp
;; found at http://emacswiki.org/emacs/KillingBuffers
(defun spacemacs/kill-other-buffers (&optional arg)
  "Kill all other buffers.
If the universal prefix argument is used then will the windows too."
  (interactive "P")
  (when (yes-or-no-p (format "Killing all buffers except \"%s\"? "
                             (buffer-name)))
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
    (when (equal '(4) arg) (delete-other-windows))
    (message "Buffers deleted!")))
#+END_SRC

*** spacemacs/align functions
#+BEGIN_SRC emacs-lisp
;; BEGIN align functions

;; modified function from http://emacswiki.org/emacs/AlignCommands
(defun spacemacs/align-repeat (start end regexp &optional justify-right after)
  "Repeat alignment with respect to the given regular expression.
If JUSTIFY-RIGHT is non nil justify to the right instead of the
left. If AFTER is non-nil, add whitespace to the left instead of
the right."

 (interactive "r\nsAlign regexp: ")
  (let* ((ws-regexp (if (string-empty-p regexp)
                        "\\(\\s-+\\)"
                      "\\(\\s-*\\)"))
         (complete-regexp (if after
                              (concat regexp ws-regexp)
                            (concat ws-regexp regexp)))
         (group (if justify-right -1 1)))
    (message "%S" complete-regexp)
    (align-regexp start end complete-regexp group 1 t)))

;; Modified answer from http://emacs.stackexchange.com/questions/47/align-vertical-columns-of-numbers-on-the-decimal-point
(defun spacemacs/align-repeat-decimal (start end)
  "Align a table of numbers on decimal points and dollar signs (both optional)"
  (interactive "r")
  (require 'align)
  (align-region start end nil
                '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                       (repeat . t)
                       (group 1 2)
                       (spacing 1 1)
                       (justify nil t)))
                nil))

(defmacro spacemacs|create-align-repeat-x (name regexp &optional justify-right default-after)
  (let ((new-func (intern (concat "spacemacs/align-repeat-" name))))
    `(defun ,new-func (start end switch)
       (interactive "r\nP")
       (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
         (spacemacs/align-repeat start end ,regexp ,justify-right after)))))

(spacemacs|create-align-repeat-x "comma" "," nil t)
(spacemacs|create-align-repeat-x "semicolon" ";" nil t)
(spacemacs|create-align-repeat-x "colon" ":" nil t)
(spacemacs|create-align-repeat-x "equal" "=")
(spacemacs|create-align-repeat-x "math-oper" "[+\\-*/]")
(spacemacs|create-align-repeat-x "ampersand" "&")
(spacemacs|create-align-repeat-x "bar" "|")
(spacemacs|create-align-repeat-x "left-paren" "(")
(spacemacs|create-align-repeat-x "right-paren" ")" t)
(spacemacs|create-align-repeat-x "backslash" "\\\\")

;; END align functions
#+END_SRC

*** spacemacs/window splits
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-focus ()
  "Split the window vertically and focus the new window."
  (interactive)
  (split-window-below)
  (windmove-down)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))

(defun split-window-right-and-focus ()
  "Split the window horizontally and focus the new window."
  (interactive)
  (split-window-right)
  (windmove-right)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))
#+END_SRC

** emacs-prelude
*** copy-file-name-to-clipboard
#+BEGIN_SRC emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

* ninrod functions
** org
- boy, will I refactor these atrocities when I properly learn elisp.
*** ninrod/org-eol-m-ret
#+BEGIN_SRC emacs-lisp
  (defun ninrod/org-eol-m-ret ()
    "Moves point to the end of the line and applies m-ret and enters insert state."
    (interactive)
    (save-excursion)
    (goto-char (point-at-eol))
    (org-meta-return)
    (evil-insert-state))
#+END_SRC
*** ninrod/org-bol-m-ret
#+BEGIN_SRC emacs-lisp
  (defun ninrod/org-bol-m-ret ()
    "Same as ninrod/org-eol-m-ret, but now at beggining of the line.
  This could be a single parameterized function if I weren't such a piece of crap Lisp programmer."
    (interactive)
    (save-excursion)
    (goto-char (point-at-bol))
    (org-meta-return)
    (evil-insert-state))
#+END_SRC
*** ninrod/org-insert-subheading
#+BEGIN_SRC emacs-lisp
  (defun ninrod/org-insert-subheading ()
    "evil style org-insert-subheading"
    (interactive)
    (save-excursion)
    (goto-char (point-at-eol))
    (org-insert-subheading nil)
    (evil-insert-state))
#+END_SRC

*** ninrod/org-insert-heading-respect-content
#+BEGIN_SRC emacs-lisp
  (defun ninrod/org-insert-heading-respect-content ()
    "evil style org-insert-subheading"
    (interactive)
    (save-excursion)
    (goto-char (point-at-eol))
    (org-insert-heading-respect-content)
    (evil-insert-state))
#+END_SRC

*** ninrod/org-mv-down
- credits go to [[https://www.reddit.com/r/emacs/comments/583n1x/movecopy_a_cel_to_the_right/][/u/gmfawcett]]
#+BEGIN_SRC emacs-lisp
(defun ninrod/org-mv-down ()           ; moves a value down
  (interactive)
  (let ((pos (point))               ; get current pos
        (f (org-table-get-field)))  ; copy current field
    (org-table-blank-field)         ; blank current field
    (org-table-next-row)            ; move cursor down
    (org-table-blank-field)         ; blank that field too
    (insert f)                      ; insert the value from above
    (org-table-align)               ; realign the table
    (goto-char pos)))               ; move back to original position
#+END_SRC

*** ninrod/org-swap-down
- credits go to [[https://www.reddit.com/r/emacs/comments/583n1x/movecopy_a_cel_to_the_right/][/u/gmfawcett]]
#+BEGIN_SRC emacs-lisp
(defun ninrod/org-swap-down ()               ; swap with value below
  (interactive)
  (let ((pos (point))                   ; get current pos
        (v1 (org-table-get-field)))     ; copy current field
    (org-table-blank-field)             ; blank current field
    (org-table-next-row)                ; move cursor down
    (let ((v2 (org-table-get-field)))   ; take copy of that field, too
      (org-table-blank-field)           ; blank that field too
      (insert v1)                       ; insert the value from above
      (goto-char pos)                   ; go to original location
      (insert v2)                       ; insert the value from below
      (org-table-align)                 ; realign the table
      (goto-char pos))))                ; move back to original position
#+END_SRC
** lisp
*** ninrod/eval-print-last-sexp
#+BEGIN_SRC emacs-lisp
  (defun ninrod/eval-print-last-sexp ()
      "Move point to the end of the line and eval-prints last sexp."
      (interactive)
      (save-excursion)
      (goto-char (point-at-eol))
      (eval-print-last-sexp))
#+END_SRC

*** ninrod/eval-last-sexp
#+BEGIN_SRC emacs-lisp
  (defun ninrod/eval-last-sexp ()
      "Move point to the end of the line and eval last sexp."
      (interactive)
      (save-excursion)
      (goto-char (point-at-eol))
      (eval-last-sexp nil))
#+END_SRC

** uargs
*** ninrod/uarg-shell-command
#+BEGIN_SRC emacs-lisp
  (defun ninrod/uarg-exec-shell-command ()
    (interactive)
    (execute-extended-command '(4) "shell-command"))
#+END_SRC
*** ninrod/uarg-magit-status
#+BEGIN_SRC emacs-lisp
  (defun ninrod/uarg-magit-status ()
    (interactive)
    (magit-status (magit-read-repository
                   (>= (prefix-numeric-value current-prefix-arg) 16))))
#+END_SRC
*** ninrod/extended-buffer-menu
- more info here: http://emacs.stackexchange.com/a/21635/12585
#+BEGIN_SRC emacs-lisp
  (defun ninrod/extended-buffer-menu ()
    (interactive)
    ;; M-x list-buffers???
    (execute-extended-command '(4) "buffer-menu"))
#+END_SRC

** clipboard
*** ninrod/neotree-copy-filepath-to-clipboard
- with help from [[http://stackoverflow.com/a/40564951/4921402][/u/lawlist]]
#+BEGIN_SRC emacs-lisp
  (defun ninrod/neotree-copy-path ()
    (interactive)
    (message (concat "copied path: \"" (neotree-copy-filepath-to-yank-ring) "\" to the clipboard.")))
#+END_SRC

*** ninrod/yank-to-clipboard
#+BEGIN_SRC emacs-lisp
(defun ninrod/yank-to-clipboard ()
  "Copies selection to x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save))
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "pbcopy")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!"))))
#+END_SRC

*** ninrod/paste-from-clipboard
#+BEGIN_SRC emacs-lisp
(defun ninrod/paste-from-clipboard ()
  "Pastes from x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active"))
    (insert (shell-command-to-string "pbpaste"))))
#+END_SRC

** misc
*** ninrod/revert-buffer with no confirmation
- from [[http://www.emacswiki.org/emacs-en/download/misc-cmds.el][emacswiki]]
#+BEGIN_SRC emacs-lisp
(defun ninrod/revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+END_SRC

*** ninrod/origami-toggle-node
- with help from [[https://www.reddit.com/r/emacs/comments/580v30/tweaking_origamiel_lisp_and_regexes/][reddit]]
#+BEGIN_SRC emacs-lisp
(defun ninrod/origami-toggle-node ()
 (interactive)
 (save-excursion ;; leave point where it is
  (goto-char (point-at-eol))             ;; then go to the end of line
  (origami-toggle-node (current-buffer) (point))))                 ;; and try to fold
#+END_SRC
*** ninrod/nin-echo
#+BEGIN_SRC emacs-lisp
(defun ninrod/nin-echo ()
  "just a simple test message for binds"
  (interactive)
  (message "the bind worked! yes!!"))
#+END_SRC

* ninrod macros
*** ninrod/define-and-bind-textobj
- lifted from [[https://github.com/noctuid/evil-textobj-anyblock/issues/9#issuecomment-263761927][@noctuid]]
- with help from [[http://stackoverflow.com/q/18102004/4921402][this]] so question
#+BEGIN_SRC emacs-lisp
;; modified to be able to specify name and use `function'
(defmacro define-and-bind-text-object (name key start-regex end-regex)
  (let ((inner-name (make-symbol (concat "evil-inner-" name)))
        (outer-name (make-symbol (concat "evil-a-" name))))
    `(progn
       (evil-define-text-object ,inner-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count nil))
       (evil-define-text-object ,outer-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count t))
       (define-key evil-inner-text-objects-map ,key #',inner-name)
       (define-key evil-outer-text-objects-map ,key #',outer-name))))
#+END_SRC

* evil corruption
** evil
- emacsify insert state. based on this SO question [[http://stackoverflow.com/a/26573722/4921402][here]].
#+BEGIN_SRC emacs-lisp
    (use-package evil :ensure t
      :config

      ;; remove all keybindings from insert-state keymap just
      ;; because I want to use emacs keybindings in insert state.
      (setcdr evil-insert-state-map nil)

      ;; but [escape] should switch back to normal state, obviously.
      (define-key evil-insert-state-map [escape] 'evil-normal-state)

      ;; Amazing hack lifted from: http://emacs.stackexchange.com/a/15054/12585
      ;; Imagine the following scenario.  One wants to paste some previously copied
      ;; (from application other than Emacs) text to the system's clipboard in place
      ;; of some contiguous block of text in a buffer.  Hence, one switches to
      ;; `evil-visual-state' and selects the corresponding block of text to be
      ;; replaced.  However, one either pastes some (previously killed) text from
      ;; `kill-ring' or (if `kill-ring' is empty) receives the error: "Kill ring is
      ;; empty"; see `evil-visual-paste' and `current-kill' respectively.  The
      ;; reason why `current-kill' does not return the desired text from the
      ;; system's clipboard is because `evil-visual-update-x-selection' is being run
      ;; by `evil-visual-pre-command' before `evil-visual-paste'.  That is
      ;; `x-select-text' is being run (by `evil-visual-update-x-selection') before
      ;; `evil-visual-paste'.  As a result, `x-select-text' copies the selected
      ;; block of text to the system's clipboard as long as
      ;; `x-select-enable-clipboard' is non-nil (and in this scenario we assume that
      ;; it is).  According to the documentation of `interprogram-paste-function',
      ;; it should not return the text from the system's clipboard if it was last
      ;; provided by Emacs (e.g. with `x-select-text').  Thus, one ends up with the
      ;; problem described above.  To solve it, simply make
      ;; `evil-visual-update-x-selection' do nothing:
      (fset 'evil-visual-update-x-selection 'ignore)

      (evil-mode))
#+END_SRC

** evil-commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary :ensure t
  :diminish evil-commentary-mode
  :config (evil-commentary-mode))
#+END_SRC

** evil-matchit
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit :ensure t
  :config (global-evil-matchit-mode 1))
#+END_SRC

** evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround :load-path "lisp/ninrod/evil-surround"
  :config (global-evil-surround-mode 1))
#+END_SRC

** evil-exchange
#+BEGIN_SRC emacs-lisp
(use-package evil-exchange :ensure t
  :config (evil-exchange-install))
#+END_SRC

** evil-args
#+begin_src emacs-lisp
(use-package evil-args :ensure t
  :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
)
#+end_src

** evil-visualstar
#+begin_src emacs-lisp
(use-package evil-visualstar :ensure t
  :config (global-evil-visualstar-mode))
#+end_src

** evil-indent-plus
#+begin_src emacs-lisp
(use-package evil-indent-plus :ensure t
  :config (evil-indent-plus-default-bindings))
#+end_src

** evil-anzu
- config section hack: see [[https://github.com/TheBB/spaceline/issues/69][TheBB/spaceline#69]]
#+BEGIN_SRC emacs-lisp
  (use-package evil-anzu :ensure t
    :config 
    (setq anzu-cons-mode-line-p nil))
#+END_SRC

** evil-numbers
#+BEGIN_SRC emacs-lisp
(use-package evil-numbers :ensure t)
#+END_SRC

** evil-escape
#+BEGIN_SRC emacs-lisp
(use-package evil-escape :ensure t
  :config 
  (evil-escape-mode)
)
#+END_SRC

** evil-terminal-cursor-changer
#+BEGIN_SRC text
  (use-package evil-terminal-cursor-changer :ensure t
    :config
    (setq evil-motion-state-cursor 'box)
    (setq evil-visual-state-cursor 'box)
    (setq evil-normal-state-cursor 'box)
    (setq evil-insert-state-cursor 'bar)
    (setq evil-emacs-state-cursor  'hbar)
    (unless (display-graphic-p)
      (evil-terminal-cursor-changer-activate)))
#+END_SRC

** evil-replace-with-register
#+BEGIN_SRC emacs-lisp

  ;; (use-package evil-ReplaceWithRegister :load-path "lisp/Dewdrops/evil-ReplaceWithRegister"
  ;;   :config
  ;;   (setq evil-ReplaceWithRegister-key (kbd "gr"))
  ;;   (evil-ReplaceWithRegister-install))

  (use-package evil-replace-with-register :ensure t
    :init
    (setq evil-replace-with-register-key (kbd "gr"))
    :config
    (evil-replace-with-register-install))

#+END_SRC

** evil-lisp-state
#+BEGIN_SRC emacs-lisp
  (use-package evil-lisp-state :ensure t
  :config (evil-lisp-state-leader "C-c C-l"))
#+END_SRC

** evil-textobj-entire
#+BEGIN_SRC emacs-lisp
  (use-package evil-textobj-entire :load-path "lisp/supermomonga/evil-textobj-entire"
    :config
    (define-key evil-outer-text-objects-map evil-textobj-entire-key 'evil-entire-entire-buffer))
#+END_SRC

** evil-god-state

#+BEGIN_SRC emacs-lisp
    (use-package evil-god-state :ensure t
      :config
      (setq evil-emacs-state-cursor 'box)
      (setq evil-god-state-cursor 'bar)
      (evil-define-key 'god global-map [escape] 'evil-god-state-bail)
      (evil-define-key 'emacs global-map [escape] 'evil-execute-in-god-state)
      (bind-key (kbd "C-t") 'evil-execute-in-god-state global-map)
      ;; (evil-define-key 'normal global-map "t" 'evil-execute-in-god-state)
  )
#+END_SRC

** evil-rectangle-ex

#+BEGIN_SRC emacs-lisp
  (use-package rect-ext :load-path "lisp/noctuid/rect-ext.el")
#+END_SRC

** evil-new-text-objs
#+BEGIN_SRC emacs-lisp
  (evil-define-text-object evil-inner-pipe  (count &optional beg end type)
    (evil-select-quote ?\| beg end type count nil))
  (evil-define-text-object evil-a-pipe  (count &optional beg end type)
    (evil-select-quote ?\| beg end type count t))

  (define-key evil-inner-text-objects-map "|" #'evil-inner-pipe)
  (define-key evil-outer-text-objects-map "|" #'evil-a-pipe)
  (define-key evil-inner-text-objects-map "i" #'evil-inner-pipe)
  (define-key evil-outer-text-objects-map "i" #'evil-a-pipe)

  (define-and-bind-text-object "comma" "," "," ",")
  (define-and-bind-text-object "square-brackets" "r" "\\[" "\\]")
  (define-and-bind-text-object "curly-brackets" "c" "{" "}")
#+END_SRC

* tweaks
** daemon configuration
- more info [[http://www.tychoish.com/posts/running-multiple-emacs-daemons-on-a-single-system/][here]]
#+BEGIN_SRC emacs-lisp
  ;; (setq server-use-tcp t)
#+END_SRC

** ui
#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/code/sources/dotfiles")
  (setq inhibit-startup-message t)

  ;; careful with emacs compiled with `nox'
  (if (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)


  ;; silence, please.
  ;; (setq visible-bell t)

  ;; save last cursor position
  (save-place-mode 1)
  ;; (setq save-place-file (locate-user-emacs-file "places" "emacs-places"))

  ;; save minibuffer history
  (savehist-mode 1)

  ;; hack: customize display time in modeline.
  ;; lifted from https://www.reddit.com/r/emacs/comments/2ziinn/displaytimemode_but_not_system_load/
  (setq display-time-default-load-average nil)
  (setq display-time-day-and-date t)
  (display-time-mode)

  ;;highlight current line
  ;; (global-hl-line-mode)


  ;; support for camelcase words
  ;; (global-subword-mode)

  ;; instantly display current keystrokes in mini buffer
  (setq echo-keystrokes 0.02)

  ;; Save whatever’s in the current (system) clipboard before
  ;; replacing it with the Emacs’ text.
  ;; https://github.com/dakrone/eos/blob/master/eos.org
  (setq save-interprogram-paste-before-kill t)
  (setq yank-pop-change-selection t)

  ;; MRU configs
  (setq recentf-max-menu-items 200
        recentf-max-saved-items 200)

  ;; ask before killing emacs
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** font
*** Monoisome
- get it at [[https://github.com/larsenwork/monoid][larsenwork/monoid]]
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Monoisome-14"))
  #+END_SRC

*** Monaco
  #+BEGIN_SRC text
  (add-to-list 'default-frame-alist '(font . "Monaco-14"))
  #+END_SRC

** gui
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (when (eq system-type 'darwin)
        ;; start maximized
        ;; (toggle-frame-maximized)
        ;; (set-frame-parameter nil 'fullscreen 'fullboth)

        ;; osx does not lose screen real state with menu bar mode on
        (menu-bar-mode 1)))
#+END_SRC

** indentation
#+BEGIN_SRC emacs-lisp
  (setq-default js-basic-offset 2
                js-indent-level 2
                sh-basic-offset 2
                sh-indentation 2
                indent-tabs-mode nil)
#+END_SRC

** backups
- partially lifted from [[https://github.com/magnars/.emacs.d/blob/master/init.el][magnar's emacs.d]]
#+BEGIN_SRC emacs-lisp
;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)


(setq auto-save-default nil) ; stop creating those #auto-save# files

(global-auto-revert-mode)
#+END_SRC

** garbage collection tuning
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 50000000)
(setq gnutls-min-prime-bits 4096)
#+END_SRC

** move custom data out of init.el
- more info [[http://irreal.org/blog/?p=3765][here]]
- and [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][here (M-x all-things-emacs)]]
  #+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/emacs-customizations.el")
(load custom-file 'noerror)
  #+END_SRC

** org-mode
*** general configs
- somewhat lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp

  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELED")))
  (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
  (setq org-log-done (quote time))
  (setq org-log-redeadline (quote time))
  (setq org-log-reschedule (quote time))
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** org capture
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("a" "My TODO task format." entry
         (file "~/code/sources/life/gtd/inbox.org")
         "* TODO %? ")))
(defun air-org-task-capture ()
  "Capture a task with my default template."
  (interactive)
  (org-capture nil "a"))
#+END_SRC

*** org agenda
- lifted from aaron bieber's post: [[http://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][dig into org mode]]
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/code/sources/life/"))

  (defun air-pop-to-org-agenda (split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda-list)
    (when (not split)
      (delete-other-windows)))

  (setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC

*** org refile
- with help from [[http://stackoverflow.com/a/22200624/4921402][so]]
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        '("~/code/sources/life/gtd/archives/done.org"
          "~/code/sources/life/gtd/archives/canceled.org"
          "~/code/sources/life/gtd/projects/oficina.org"
          "~/code/sources/life/gtd/inbox.org"
          "~/code/sources/life/gtd/next.org"
          "~/code/sources/life/gtd/maybe.org"))

  (setq org-refile-targets
        '((nil :maxlevel . 1)
          (org-agenda-files :maxlevel . 1)))
#+END_SRC

** show trailing whitespaces
#+BEGIN_SRC emacs-lisp
(require 'whitespace) 
(setq-default show-trailing-whitespace t)
(defun no-trailing-whitespace () (setq show-trailing-whitespace nil))
(add-hook 'minibuffer-setup-hook 'no-trailing-whitespace)
(add-hook 'ielm-mode-hook 'no-trailing-whitespace)
(add-hook 'gdb-mode-hook 'no-trailing-whitespace)
(add-hook 'help-mode-hook 'no-trailing-whitespace)
(add-hook 'term-mode-hook 'no-trailing-whitespace)
(add-hook 'eshell-load-hook 'no-trailing-whitespace)
(add-hook 'Buffer-menu-mode-hook 'no-trailing-whitespace)
#+END_SRC

* packages
** cosmetic
*** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t
    :config
    (use-package all-the-icons-dired :load-path "lisp/jtbm37/all-the-icons-dired"))
#+END_SRC

*** themes
**** spacemacs-theme
  #+BEGIN_SRC emacs-lisp
    (use-package spacemacs-dark-theme :load-path "lisp/ninrod/spacemacs-theme"
      :init
      (setq spacemacs-theme-org-height nil)
      :config
      (load-theme 'spacemacs-dark t))
  #+END_SRC

**** zerodark-theme
#+BEGIN_SRC text
  (use-package zerodark-theme :load-path "lisp/ninrod/zerodark-theme"
    :init
    (setq zerodark-use-paddings-in-mode-line nil)
    (setq anzu-cons-mode-line-p t)

    ;; (use-package modeline-posn :ensure t
    ;;   :config
    ;;   (size-indication-mode))

    :config
    (load-theme 'zerodark t))
#+END_SRC

**** darktooth-theme
#+BEGIN_SRC text
  (use-package darktooth-theme
    :init

    (load-theme 'darktooth t)
    (setq anzu-cons-mode-line-p t)
    (darktooth-modeline)
    (with-eval-after-load "git-gutter"
      (set-face-attribute 'git-gutter:added    nil :foreground "#5A790E")
      (set-face-attribute 'git-gutter:deleted  nil :foreground "#9D0006")
      (set-face-attribute 'git-gutter:modified nil :foreground "#8F3F71"))

    :defer t
    :ensure t)
#+END_SRC

**** gruvbox-theme
#+BEGIN_SRC text
  (use-package gruvbox-theme
    :init
      (load-theme 'gruvbox t)
    :defer t
    :ensure t)
#+END_SRC

**** soothe-theme
#+BEGIN_SRC text
  (use-package soothe-theme
    :init (load-theme 'soothe t)
    :defer t
    :ensure t)
#+END_SRC

*** spaceline
- to see an exhaustive separator list see [[https://github.com/milkypostman/powerline/blob/master/powerline-separators.el#L9-L11][here]].
#+BEGIN_SRC emacs-lisp
    (use-package spaceline :ensure t
      :config
      (setq powerline-height 30)
      (setq powerline-default-separator 'utf-8) ;customize separators for Powerline: alternate, slant, wave, zigzag, nil.
      (setq spaceline-separator-dir-left '(right . right))
      (setq spaceline-separator-dir-right '(right . right))
      (when (eq system-type 'darwin) (setq ns-use-srgb-colorspace nil))
      (setq powerline-default-separator 'slant)
      (setq spaceline-workspace-numbers-unicode t) ;for eyebrowse. nice looking unicode numbers for tagging different layouts
      (setq spaceline-window-numbers-unicode t)
      (setq spaceline-highlight-face-func #'spaceline-highlight-face-evil-state) ; set colouring for different evil-states
      (require 'spaceline-config)
      (spaceline-spacemacs-theme)
      (spaceline-compile))
#+END_SRC

*** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters :ensure t
  :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
*** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode :ensure t)
#+END_SRC
*** highlight-numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers :ensure t
:config (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC

*** highlight-parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses :ensure t
    :diminish highlight-parentheses-mode
    :config
        (add-hook 'prog-mode-hook #'highlight-parentheses-mode)
        (add-hook 'org-mode-hook #'highlight-parentheses-mode)
        (setq hl-paren-delay 0.2)
        (setq hl-paren-colors '("Springgreen3"
                                "IndianRed1"
                                "IndianRed3"
                                "IndianRed4"))
        (set-face-attribute 'hl-paren-face nil :weight 'ultra-bold))
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens :ensure t
    :config
    (show-smartparens-global-mode +1)

    :init
    ;; settings
    (setq sp-show-pair-delay 0.1
          sp-show-pair-from-inside t

          ;; fix paren highlighting in normal mode
          ;; sp-highlight-pair-overlay nil
          ;; sp-highlight-wrap-overlay nil
          ;; sp-highlight-wrap-tag-overlay nil

          ))
#+END_SRC
** expand functionality
*** restart-emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs :ensure t)
#+END_SRC

*** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse :ensure t
  :config
    (setq eyebrowse-wrap-around t)
    (eyebrowse-mode t))
#+END_SRC

*** multi-term
#+BEGIN_SRC emacs-lisp
(use-package multi-term :ensure t
  :config (setq multi-term-program "/bin/zsh"))
#+END_SRC

*** ag: the silver searcher
#+BEGIN_SRC emacs-lisp
(use-package ag :ensure t)
#+END_SRC

*** origami
#+BEGIN_SRC emacs-lisp
(use-package origami :ensure t
  :config
    (add-hook 'prog-mode-hook
      (lambda ()
        (setq-local origami-fold-style 'triple-braces)
        (origami-mode)
        (origami-close-all-nodes (current-buffer)))))
#+END_SRC

*** restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient :ensure t)
#+END_SRC

*** atomic-chrome
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (use-package atomic-chrome :ensure t
      :init
      (atomic-chrome-start-server)))
  #+END_SRC

*** vidff
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
(use-package vdiff :ensure t
:config
(evil-define-key 'normal vdiff-mode-map "," vdiff-mode-prefix-map)))
#+END_SRC

** completions
*** ivy/counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
      ;; (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (ivy-mode 1)
      (setq ivy-height 15)
      (use-package counsel :ensure t))
#+END_SRC

*** company
#+BEGIN_SRC emacs-lisp
(use-package company :ensure t
  :config
    (add-hook 'after-init-hook 'global-company-mode)
    ;; TODO: could we use TAB?
    (define-key company-mode-map (kbd "C-SPC") 'company-complete))
#+END_SRC

*** yasnippet
  #+BEGIN_SRC emacs-lisp
(use-package yasnippet :ensure t
  :config (yas-global-mode 1))
  #+END_SRC

*** flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck :ensure t
      :config (global-flycheck-mode t))
  #+END_SRC

*** emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :init (progn
                 (add-hook 'web-mode-hook  'emmet-mode)
                 (add-hook 'html-mode-hook 'emmet-mode)
                 (add-hook 'sgml-mode-hook 'emmet-mode)
                 (add-hook 'css-mode-hook  'emmet-mode))
    :defer t
    :ensure t)
#+END_SRC

*** smart-tab
#+BEGIN_SRC text
  (use-package smart-tab :ensure t
    :config (global-smart-tab-mode 1))
#+END_SRC

** keybinds
*** which key
  #+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure t
    :diminish which-key-mode
	:config (which-key-mode))
  #+END_SRC

*** bind-map
#+BEGIN_SRC emacs-lisp
(use-package bind-map :ensure t)
#+END_SRC

*** bind-key
#+BEGIN_SRC emacs-lisp
(use-package bind-key :ensure t)
#+END_SRC

*** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra :ensure t
  :config
    (use-package ivy-hydra :ensure t))
#+END_SRC

** file browsing
*** projectile
- the projectile-switch-project-action hack was lifted from [[projectile-switch-project-action][here]].
#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure t
    :diminish projectile-mode
    :init
      ;; (add-hook 'after-init-hook 'projectile-mode)
      (use-package counsel-projectile :ensure t)

      ;; use ivy
      (setq projectile-completion-system 'ivy)

      ;; make projectile usable for every directory
      (setq projectile-require-project-root nil)

      ;; cd into dir i want, including git-root
      ;; (defun cd-dwim ()
      ;;     (cd (projectile-project-root)))
      ;; (setq projectile-switch-project-action 'cd-dwim)

    :config
      (projectile-global-mode)
  )
#+END_SRC

*** ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger :ensure t
    :config
        ;; (ranger-override-dired-mode t)
        (setq ranger-cleanup-on-disable t)
        (setq ranger-show-dotfiles t)
        (setq ranger-hide-cursor nil))
#+END_SRC

*** neotree
#+BEGIN_SRC emacs-lisp
    (use-package neotree :ensure t
      :init
      (setq neo-create-file-auto-open t
            neo-auto-indent-point nil
            neo-mode-line-type 'none
            neo-window-fixed-size nil ; or neo-window-width 50
            neo-show-updir-line nil
            neo-smart-open t
            neo-show-hidden-files t
            neo-theme (if (display-graphic-p) 'icons 'nerd) ; fallback
            ;; neo-theme 'nerd ; fallback
            neo-banner-message nil
  ))
#+END_SRC

*** dired+
#+BEGIN_SRC emacs-lisp
  (use-package dired+ :ensure t
    :init
    (setq diredp-hide-details-initially-flag nil))
#+END_SRC

*** dired-k
#+BEGIN_SRC emacs-lisp
  (use-package dired-k :ensure t
    :init
      (setq dired-k-human-readable t)
      (setq dired-k-style 'git)
    :config
    (add-hook 'dired-initial-position-hook 'dired-k))

#+END_SRC

*** dired-sort
#+BEGIN_SRC emacs-lisp
(use-package dired-sort :ensure t)
#+END_SRC

** git
*** git-gutter-fringe
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (message "using git-gutter-fringe")
    (use-package git-gutter-fringe
      :init
      (global-git-gutter-mode t)
      :defer t
      :ensure t))
#+END_SRC

*** magit
- for more info about magit-display-buffer-function, see [[http://stackoverflow.com/q/39933868/4921402][here]].
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t
    :config
      ;;(setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
      (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
      (setq magit-repository-directories '("~/code/sources"))
      (use-package evil-magit :ensure t)
      (setq magit-completing-read-function 'ivy-completing-read)
  )
#+END_SRC

** org
*** Org Bullets
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :init

      ;; org-bullets-bullet-list
      ;; default: "◉ ○ ✸ ✿"
      ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
      ;; Small: ► • ★ ▸
      (setq org-bullets-bullet-list '("•"))

      ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱.
      ;; (setq org-ellipsis "⤵")
      (setq org-ellipsis "…")

      :config
      (add-hook 'org-mode-hook 
                (lambda () 
                  (org-bullets-mode 1))))
  #+END_SRC

*** Reveal.js
  #+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure t)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize 
  :ensure t)
  #+END_SRC

*** ob-http
#+BEGIN_SRC emacs-lisp
(use-package ob-http :ensure t
:config
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (http . t))))
#+END_SRC

** filetypes
*** md: markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** html: web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :init 
  (setq web-mode-enable-current-element-highlight t)
  :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

      (defun my-web-mode-hook ()
        "Hooks for Web mode."

        ;; config auto closing: http://stackoverflow.com/a/23407052/4921402 
        (setq web-mode-tag-auto-close-style 2)
        (setq web-mode-auto-close-style 2)
        (setq web-mode-enable-auto-closing t)

        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset    2)
        (setq web-mode-code-indent-offset   2))
      (add-hook 'web-mode-hook 'my-web-mode-hook))
#+END_SRC

*** css/less: 
#+BEGIN_SRC emacs-lisp
  (use-package less-css-mode :ensure t)
#+END_SRC

*** js: js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode :ensure t
  :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC

*** json: json-mode, json-reformat
#+BEGIN_SRC emacs-lisp
  (use-package json-reformat :ensure t
    :config
    (setq json-reformat:indent-width 2))

  (use-package json-mode :ensure t)
#+END_SRC

*** vimrc: vimrc mode
#+BEGIN_SRC emacs-lisp
(use-package vimrc-mode :ensure t)
#+END_SRC

*** docker: dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode :ensure t
  :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

*** gitconfig-mode
#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode :ensure t)
#+END_SRC

** mirrors
*** elpa-mirror
#+BEGIN_SRC emacs-lisp
(use-package elpa-mirror :ensure t
:init (setq elpamr-default-output-directory "~/.emacs.d/thin-elpa-mirror"))
#+END_SRC

*** elpa-clone
#+BEGIN_SRC emacs-lisp
(use-package elpa-clone :ensure t)
#+END_SRC

* fixes/patches
** yasnippet hijacks TAB key in term mode
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook 'my-term-mode-hook)
(defun my-term-mode-hook ()
  (yas-minor-mode -1))
#+END_SRC

** make zsh with bindkey -v and ansi-term be friendly to each other [[https
://github.com/syl20bnr/spacemacs/issues/7140][syl20bnr/spacemacs#7140]]
*** TheBB's solution
#+BEGIN_SRC emacs-lisp
#+END_SRC

** fix $PATH on macosx with exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
      (use-package exec-path-from-shell
        :ensure t
        :config
          (exec-path-from-shell-initialize)))
#+END_SRC

** diminishes
#+BEGIN_SRC emacs-lisp
(diminish 'undo-tree-mode)
(diminish 'auto-revert-mode)
(diminish 'org-indent-mode)
(diminish 'smartparens-mode)
(diminish 'git-gutter-mode)
(diminish 'evil-escape-mode)
(diminish 'subword-mode)
(diminish 'smart-tab-mode)
(diminish 'flyspell-mode "FlyS")
(diminish 'flycheck-mode "FlyC")
#+END_SRC

** M-x man
- [[http://emacs.stackexchange.com/a/10669/12585][list]] of evil states: 
- with [[https://github.com/syl20bnr/spacemacs/issues/7346][help]] from @TheBB 
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "man" 
      (evil-set-initial-state 'Man-mode 'normal)
      (setq Man-notify-method 'pushy)
  )
#+END_SRC

** dabbrev-expand case fix
#+BEGIN_SRC emacs-lisp
  (setq dabbrev-case-fold-search nil)
#+END_SRC

* keybinds
** SPC-map
*** design
- buffer switch/opening and overall manipulations
- file openings, manipulations: dired, neotree, bookmarks
- window splits/movements
*** bind-map
#+BEGIN_SRC emacs-lisp
(bind-map spc-map
    :keys ("M-SPC")
    :evil-keys ("SPC")
    :evil-states (normal visual motion))
#+END_SRC

*** fast
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "s" 'ivy-switch-buffer
    "d" 'spacemacs/kill-this-buffer ; Delete buffer
    "w" 'write-file ; Save as

    "m" 'bookmark-set
    "<SPC>" 'counsel-bookmark
    "DEL" 'neotree-toggle
    "TAB" 'counsel-projectile-switch-project
    "RET" 'evil-save-modified-and-close

    "j" 'evil-window-down
    "k" 'evil-window-up
    "h" 'evil-window-left
    "l" 'evil-window-right

    "y" 'split-window-right-and-focus
    "x" 'split-window-below-and-focus)
#+END_SRC

*** caps
**** A: Align
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "Aa" 'align
  "Ac" 'align-current
  "Am" 'spacemacs/align-repeat-math-oper
  "Ar" 'spacemacs/align-repeat

  "A&" 'spacemacs/align-repeat-ampersand
  "A(" 'spacemacs/align-repeat-left-paren
  "A)" 'spacemacs/align-repeat-right-paren
  "A," 'spacemacs/align-repeat-comma
  "A." 'spacemacs/align-repeat-decimal
  "A:" 'spacemacs/align-repeat-colon
  "A;" 'spacemacs/align-repeat-semicolon
  "A=" 'spacemacs/align-repeat-equal
  "A\\" 'spacemacs/align-repeat-backslash
  "A|" 'spacemacs/align-repeat-bar
)
(which-key-declare-prefixes "SPC A" "Align")

#+END_SRC

**** B: Buffer operations
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "Bo" 'spacemacs/kill-other-buffers
  "Bu" 'ninrod/extended-buffer-menu ; mnemonic: Uargs M-x buffer-menu
  "Br" 'ninrod/revert-buffer-no-confirm
)
#+END_SRC
**** E: Eyebrowse
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
    "Ec" 'eyebrowse-create-window-config
    "En" 'eyebrowse-next-window-config
    "Er" 'eyebrowse-rename-window-config
    "Es" 'eyebrowse-switch-to-window-config
)
(which-key-declare-prefixes "SPC E" "Eyebrowse")
#+END_SRC

**** F: File/Dir operations
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "Fy" 'prelude-copy-file-name-to-clipboard
    "Fd" 'make-directory
    "Fm" 'bookmark-delete
  )
  (which-key-declare-prefixes "SPC F" "File/Dir operations")
#+END_SRC
**** G: maGit
- *lift*: the below magit SPC gs bind hack was lifted from [[http://emacs.stackexchange.com/a/27623/12585][this]] SO answer.
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "Gf" 'magit-log-buffer-file
  "Gs" 'ninrod/uarg-magit-status)
(which-key-declare-prefixes "SPC G" "maGit operations")
#+END_SRC

**** I: ivy
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "Ia" 'counsel-ag
    "Ib" 'counsel-descbinds
    "If" 'counsel-describe-function
    "Il" 'ivy-pop-view  ; load
    "Is" 'ivy-push-view ; save
    "It" 'counsel-describe-face
    "Iv" 'counsel-describe-variable
  )
  (which-key-declare-prefixes "SPC I" "Ivy")
#+END_SRC

**** M: M-x useful functions
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "Mc" 'count-words
    "Me" 'ninrod/uarg-exec-shell-command
    "Mf" 'customize-apropos-faces
    "Mi" 'ielm
    "Mm" 'elpamr-create-mirror-for-installed
    "Mr" 'replace-string
    "Ms" 'sort-lines
  )
  (which-key-declare-prefixes "SPC M" "M-x useful functions")
  (which-key-declare-prefixes "SPC Mi" "REPL: inferior elisp mode")
#+END_SRC

**** O: org-mode
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "Oc" 'air-org-task-capture
    "Oa" 'air-pop-to-org-agenda
    "Ot" 'org-table-convert-region
    "Ob" 'org-bullets-mode
  )
  (which-key-declare-prefixes "SPC O" "Org-mode")
#+END_SRC

**** P: projectile
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "Pa" 'projectile-ag
  "Ps" 'counsel-projectile-switch-project
  "Po" 'projectile-switch-open-project
)
(which-key-declare-prefixes "SPC P" "Projectile")
#+END_SRC

**** R: Rectangle operations
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
    ;; ** window manipulations **
    "Rn" 'rect-ext-narrow
    "Rw" 'rect-ext-widen
)
#+END_SRC
**** S: Spelling
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "Sw" 'ispell-word
  "Se" (lambda () (interactive) (ispell-change-dictionary "english"))
  "Sp" (lambda () (interactive) (ispell-change-dictionary "pt_BR"))
  "Sk" (lambda () (interactive) (flyspell-mode -1))
  "Ss" (lambda () (interactive) (flyspell-mode 1))
)
(which-key-declare-prefixes "SPC S" "Spelling")
(which-key-add-key-based-replacements
  "SPC Sw" "ispell: check word"
  "SPC Se" "ispell: use english dictionary"
  "SPC Sp" "ispell: use pt_BR dictionary"
  "SPC Sk" "turn off flyspell mode"
  "SPC Ss" "turn on flyspell mode"
)
#+END_SRC

**** X: useful M-x commands
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys spc-map
    "Xm" 'man
    "Xw" 'woman
    ;; evil
    "Xeu" 'undo-tree-visualize
    "Xe+" 'evil-numbers/inc-at-pt
    "Xe-" 'evil-numbers/dec-at-pt
  )
  (which-key-declare-prefixes "SPC x" "useful M-x commands")
#+END_SRC

**** Y: clipboard/yank/paste operations
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
  "Yy" 'ninrod/yank-to-clipboard
  "Yp" 'ninrod/paste-from-clipboard
)
(which-key-add-key-based-replacements "SPC Y" "clipboard/yank/paste")
#+END_SRC

**** H: hydras
***** z: zoom
#+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (spc-map "Hz")
  "zoom"
  ("i" text-scale-increase "in")
  ("o" text-scale-decrease "out"))
(which-key-declare-prefixes "SPC H" "hydras")
(which-key-add-key-based-replacements "SPC Hz" "zooming hydra")
#+END_SRC

**** T: Toggles
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys spc-map
    "Tr" 'rainbow-mode
    "Tt" 'toggle-truncate-lines
)
(which-key-declare-prefixes "SPC T" "toggles")
#+END_SRC
** s-map
*** idea
- other fast and reoccurring operations
*** bind-map
#+BEGIN_SRC emacs-lisp
  (bind-map s-map
    :evil-keys ("s")
    :evil-states (normal visual motion))
#+END_SRC
*** fast
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys s-map
    ;; "<SPC>" 'counsel-M-x

    ;; terminal
    "$" 'multi-term
    "(" 'eshell

    "m" 'counsel-M-x
    "g" 'evil-execute-in-god-state
    "r" 'restart-emacs
    "p" 'counsel-yank-pop
    "c" 'cd
  )
#+END_SRC

** evil
*** abusing the g prefix
#+BEGIN_SRC emacs-lisp
  (bind-key "go" 'evil-goto-first-line evil-motion-state-map)
  (bind-key "gl" 'evil-goto-line evil-motion-state-map)
  (bind-key "gp" 'pop-global-mark evil-motion-state-map)
  (bind-key "g9" (kbd "Hz-M") evil-motion-state-map)
  (bind-key "g0" (kbd "LztM") evil-motion-state-map)

  (bind-key "g1" 'eyebrowse-switch-to-window-config-1 evil-motion-state-map)
  (bind-key "g2" 'eyebrowse-switch-to-window-config-2 evil-motion-state-map)
  (bind-key "g3" 'eyebrowse-switch-to-window-config-3 evil-motion-state-map)
  (bind-key "g4" 'eyebrowse-switch-to-window-config-4 evil-motion-state-map)

  (bind-key "gs" 'magit-status evil-motion-state-map)
  (bind-key "g." 'counsel-projectile evil-motion-state-map)
  (bind-key "g/" 'swiper evil-motion-state-map)
  (bind-key "gh" 'counsel-recentf evil-motion-state-map)

  (bind-key "gi" 'goto-last-change evil-normal-state-map)
  (bind-key "g;" 'evil-last-non-blank evil-motion-state-map)

  ;; (bind-key "g RET" 'er/expand-region evil-normal-state-map)
#+END_SRC

*** comfort improvements
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "RET") 'evil-write evil-normal-state-map)
  (bind-key (kbd "TAB") 'evil-toggle-fold evil-normal-state-map)
  (bind-key (kbd "DEL") 'counsel-find-file evil-normal-state-map)
  (bind-key "q" 'evil-quit evil-normal-state-map)
  (bind-key "-" 'evil-ex-nohighlight evil-normal-state-map)
  (bind-key "Q" 'evil-record-macro evil-normal-state-map)
  (bind-key "(" 'evil-backward-paragraph evil-motion-state-map)
  (bind-key ")" 'evil-forward-paragraph evil-motion-state-map)
#+END_SRC

*** function keys
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "<f1>") 'eyebrowse-switch-to-window-config-1 evil-motion-state-map)
  (bind-key (kbd "<f2>") 'eyebrowse-switch-to-window-config-2 evil-motion-state-map)
  (bind-key (kbd "<f3>") 'eyebrowse-switch-to-window-config-3 evil-motion-state-map)
  (bind-key (kbd "<f4>") 'eyebrowse-switch-to-window-config-4 evil-motion-state-map)

  (bind-key (kbd "<f5>") 'eyebrowse-switch-to-window-config-5 evil-motion-state-map)
  (bind-key (kbd "<f6>") 'eyebrowse-switch-to-window-config-6 evil-motion-state-map)
  (bind-key (kbd "<f7>") 'eyebrowse-switch-to-window-config-7 evil-motion-state-map)
  (bind-key (kbd "<f8>") 'eyebrowse-switch-to-window-config-8 evil-motion-state-map)
#+END_SRC

*** fixes
#+BEGIN_SRC emacs-lisp
  ;; As I've sequestered < and > when in org mode, we need a workaround.
  (bind-key "g>" 'evil-shift-right evil-motion-state-map)
  (bind-key "g<" 'evil-shift-left evil-motion-state-map)

  ;; `z.' fix
  (bind-key "z." 'evil-scroll-line-to-center evil-normal-state-map)

  ;; `z-' fix
  (bind-key "z-" 'evil-scroll-line-to-bottom evil-normal-state-map)

  ;; make / and ? behave like vim
  (bind-key (kbd "<escape>") 'isearch-cancel isearch-mode-map)
  (bind-key (kbd "<escape>") 'minibuffer-keyboard-quit evil-ex-search-keymap)

  ;; auto-indent on RET
  (bind-key (kbd "RET") 'newline-and-indent global-map)
#+END_SRC

*** insert state
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<tab>") 'dabbrev-expand)
  (bind-key (kbd "C-<tab>") 'dabbrev-expand minibuffer-local-map)
#+END_SRC

** org-mode
*** bind-map
#+BEGIN_SRC emacs-lisp
  (bind-map org-comma-map
    :evil-keys (",")
    :evil-states (normal visual)
    :major-modes (org-mode))

  (bind-map org-t-map
    :evil-keys ("t")
    :evil-states (normal)
    :major-modes (org-mode))
#+END_SRC

*** , local
**** directs
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-comma-map
    "r" 'org-refile
    "n" 'org-narrow-to-subtree
    "w" 'widen


    "TAB" 'evil-toggle-fold

    "RET" 'org-open-at-point
    "*" 'org-ctrl-c-star
    "," 'org-todo
    )
#+END_SRC
**** local groups
***** a: additions
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-comma-map
    "at" 'counsel-org-tag
    "al" 'org-insert-link
  )
  (which-key-declare-prefixes ", a" "add")
#+END_SRC

#+RESULTS:
***** c: clock/timer
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-comma-map
    "ci" 'org-clock-in
    "co" 'org-clock-out
    "c-" 'org-timer-item
    "ct" 'org-timer
    "cs" 'org-timer-stop
    )
  (which-key-declare-prefixes ", c" "clock/timer")
#+END_SRC
***** s: subtree commands
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-comma-map
  ;; subtree commands
  "sh" 'org-promote-subtree
  "sl" 'org-demote-subtree
  "sk" 'org-move-subtree-up
  "sj" 'org-move-subtree-down

  "sy" 'org-copy-subtree
  "sd" 'org-cut-subtree
  "sp" 'org-paste-subtree
  "sc" 'org-clone-subtree-with-time-shift)
(which-key-declare-prefixes ", s" "org subtree operations")
#+END_SRC

***** t: table
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-comma-map
    "tt" 'org-table-transpose-table-at-point

    "th" 'org-backward-sentence ;; M-a tga
    "tl" 'org-forward-sentence ;; M-e tge

    "td" 'org-table-delete-column

    ;; from https://www.reddit.com/r/emacs/comments/56oc9c/orgtables_is_there_a_way_to_delete_a_whole_table/
    ;; fist place point in the top left bar (`|')
    "tm" 'org-mark-element

    "tr" 'org-table-insert-row ; above
    "tc" 'org-table-insert-column ;before

    ;; formulas
    "to" 'org-table-toggle-coordinate-overlays
    "t?" 'org-table-field-info
    "t=" 'org-table-eval-formula
    "tf" (lambda () (interactive)
           (let ((current-prefix-arg 4))
             (call-interactively 'org-table-recalculate)))

    "t RET" 'org-table-copy-down
    )
  (which-key-add-major-mode-key-based-replacements 'org-mode ", t" "org-table")
  (which-key-add-major-mode-key-based-replacements 'org-mode ", tf" "recalculate formulas")
#+END_SRC

**** caps
***** E: exports
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-comma-map
  "Ed" 'org-export-dispatch)
(which-key-declare-prefixes ", E" "Exports")
#+END_SRC

***** T: toggles
#+BEGIN_SRC emacs-lisp
(bind-map-set-keys org-comma-map
  "Tl" 'org-toggle-link-display
)
(which-key-declare-prefixes ", T" "Toggles")
#+END_SRC

*** t local
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys org-t-map
    "l" 'org-metaright
    "h" 'org-metaleft
    "j" 'org-metadown
    "k" 'org-metaup

    "-" 'org-ctrl-c-minus

    "TAB" 'ninrod/org-insert-heading-respect-content ; open new heading below, respecting content
    "<SPC>" 'ninrod/org-insert-subheading ; open new subheading
    "RET" 'ninrod/org-eol-m-ret ; open new heading below, not respecting content
    "DEL" 'ninrod/org-bol-m-ret ; open new heading above
    )
#+END_SRC

*** local fixes
**** org-mode-map
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "RET") 'evil-write)
  (evil-define-key 'normal org-mode-map "zu" 'outline-up-heading)
  (evil-define-key 'normal org-mode-map "zh" 'outline-previous-visible-heading)
  (evil-define-key 'normal org-mode-map "zj" 'org-forward-heading-same-level)
  (evil-define-key 'normal org-mode-map "zk" 'org-backward-heading-same-level)
  (evil-define-key 'normal org-mode-map "zl" 'outline-next-visible-heading)
  (evil-define-key 'normal org-mode-map "<" 'org-do-promote)
  (evil-define-key 'normal org-mode-map ">" 'org-do-demote)
  (unbind-key "C-<tab>" org-mode-map)
  (bind-key "C-j" 'org-edit-special org-mode-map)
#+END_SRC

**** org-src-code-map
#+BEGIN_SRC emacs-lisp
  (bind-key "C-j" 'org-edit-src-exit org-src-mode-map)
  (evil-define-key 'normal org-src-mode-map (kbd "<RET>") 'org-edit-src-exit)
#+END_SRC

** other modes
*** lisp-mode
**** bind-map
#+BEGIN_SRC emacs-lisp
  (bind-map lisp-comma-map
      :evil-keys (",")
      :evil-states (normal visual)
      :major-modes (lisp-mode lisp-interaction-mode))

  (bind-map lisp-t-map
    :evil-keys ("t")
    :evil-states (normal)
    :major-modes (lisp-mode lisp-interaction-mode))

#+END_SRC
**** t-map
#+BEGIN_SRC emacs-lisp
  (bind-map-set-keys lisp-t-map
    "l" 'ninrod/eval-last-sexp
    "o" 'ninrod/eval-print-last-sexp ;mnemonic: output to current buffer
  )

  (which-key-add-major-mode-key-based-replacements 'lisp-mode "t l" "eval-last-sexp")
  (which-key-add-major-mode-key-based-replacements 'lisp-mode "t p" "eval-print-last-sexp")
#+END_SRC
*** term
- with help from [[https://www.reddit.com/r/emacs/comments/56xmvg/properly_editing_a_shell_buffer_with_evilmode/][/r/emacs]]
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'term-mode 'emacs)
(bind-key "C-c <escape>"  'term-send-esc)
(bind-key "C-c l"  'term-line-mode)
(bind-key "C-c c"  'term-char-mode)
(bind-key "C-c j"  'multi-term-next)
(bind-key "C-c k"  'multi-term-prev)

(bind-map term-map
    :evil-keys (",")
    :evil-states (normal visual)
    :major-modes (term-mode))

(bind-map-set-keys term-map
  "l" 'term-line-mode
  "c" 'term-char-mode
  "n" 'multi-term-next
  "p" 'multi-term-prev
)

#+END_SRC

*** dired
**** fix: unhijack my precious SPC leader key.
- lifted from this [[http://stackoverflow.com/a/10672548/4921402][SO question]]
#+BEGIN_SRC emacs-lisp
(define-key dired-mode-map (kbd "SPC") nil)
#+END_SRC

*** magit
**** magit-status-mode-map fixes
#+BEGIN_SRC emacs-lisp
(define-key magit-status-mode-map (kbd "SPC") nil)
(define-key magit-status-mode-map "go" 'evil-goto-first-line)
#+END_SRC

**** magit-hunk-section-map fixes
#+BEGIN_SRC emacs-lisp
(unbind-key "s" magit-hunk-section-map)
#+END_SRC

**** magit-file-section-map
#+BEGIN_SRC emacs-lisp
(unbind-key "s" magit-file-section-map)
#+END_SRC

*** prog-mode
#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal prog-mode-map (kbd "TAB") 'ninrod/origami-toggle-node)
#+END_SRC

*** ivy minibuffer
#+BEGIN_SRC emacs-lisp
(bind-key "<escape>"  'evil-escape ivy-minibuffer-map)
(bind-key "<escape>"  'evil-escape ivy-switch-buffer-map)
(bind-key "<escape>"  'evil-escape ivy-mode-map)
(bind-key "<escape>"  'evil-escape ivy-occur-mode-map)
(bind-key "<escape>"  'evil-escape ivy-occur-grep-mode-map)
#+END_SRC

*** ag-mode
#+BEGIN_SRC emacs-lisp
  (unbind-key "s" ag-mode-map)
  (unbind-key "g" ag-mode-map)

  (unbind-key "<SPC>" ag-mode-map)
  ;; (define-key ag-mode-map (kbd "SPC") nil)
#+END_SRC

** awesome available binds
*** g prefix: t, T
*** SPC leader: (TAB / . ; , -)
** emacs native binds
*** org-mode
- org-next-link: =C-c C-x C-n=
** neotree-evilify
#+BEGIN_SRC emacs-lisp
  (require 'neotree)
  (require 'evil)
  (require 'dired)

  (unbind-key "s" neotree-mode-map)
  (unbind-key "d" neotree-mode-map)
  (unbind-key "n" neotree-mode-map)
  (unbind-key "-" neotree-mode-map)
  (unbind-key "N" neotree-mode-map)
  (unbind-key "<SPC>" neotree-mode-map)

  (define-minor-mode neotree-evil
    "Use NERDTree bindings on neotree."
    :lighter " NT"
    :keymap (progn
              (evil-make-overriding-map neotree-mode-map 'normal t)
              (evil-define-key 'normal neotree-mode-map
                "d" 'neotree-change-root
                "p" 'ninrod/neotree-copy-path
                "u" 'neotree-select-up-node
                "zj" 'neotree-select-next-sibling-node
                "zk" 'neotree-select-previous-sibling-node
                "gr" 'neotree-refresh
                "q" 'neotree-toggle
                "i" 'neotree-enter-horizontal-split
                "c" 'neotree-create-node
                "y" 'neotree-copy-node
                "x" 'neotree-delete-node
                "r" 'neotree-rename-node
                "gg" 'evil-goto-first-line
                "go" 'evil-goto-first-line
                "gl" 'evil-goto-line
                (kbd "<DEL>") 'neotree-select-up-node
                (kbd "<return>") 'neotree-enter)
              neotree-mode-map))
#+END_SRC

